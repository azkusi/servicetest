{"version":3,"sources":["store_pages/BookingRequest.js","firebase.js","store_pages/NonExistentRoute.js","store_pages/hooks/useFirestore.js","store_pages/components/ImageGrid.js","store_pages/components/Modal.js","store_pages/Gallery.js","store_pages/Services.js","store_components/Navigation.js","store_components/BackgroundImage.js","store_components/SecondaryNav.js","store_pages/Messages.js","store_pages/Calendar.js","store_pages/Conversation.js","store_pages/BookingDetails.js","store_pages/components/Advertisements.js","store_pages/NonExistentStore.js","App.js","reportWebVitals.js","index.js"],"names":["db","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","config","auth","apps","length","firestore","BookingRequest","serviceContent","useState","success","setSuccess","nameRef","useRef","messageRef","emailRef","serviceRef","notesRef","offerred_services","service_content","services","e","a","preventDefault","nameSent","current","value","emailSent","messageSent","serviceChosen","serviceNotes","console","log","currentTime","Date","now","convoref","collection","doc","service_provider_name","convorefID","id","set","add","bookingRequestNotifRef","get","then","booking_requests_notif_array","data","booking_requests_notifications","push","update","FieldValue","arrayUnion","useEffect","JSON","stringify","Card","Body","Form","onSubmit","Group","Label","Control","type","ref","placeholder","required","Select","map","item","index","toString","service_name","Button","Alert","variant","page_title","require","io","process","PORT","NonExistentRoute","projectFirestore","className","serverTimestamp","useFirestore","provider_name","docs","setDocs","unsub","onSnapshot","documents","gallery_images","ImageGrid","provider_Name","setSelectedImg","motion","div","layout","whileHover","opacity","s","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","target","classList","contains","y","Gallery","providerName","Services","servicesReady","setServicesReady","history","useHistory","serviceCategories","setServiceCategories","serviceSubCategories","setServiceSubCategories","setServices","Promise","resolve","reject","service_categories","i","j","serviceHolder","servicesB","main_category","Spinner","animation","Object","keys","key","Navigation","topNavColour","page_styling","style","textDecoration","to","BackgroundImage","backgroundImage","frontPageTitle","frontPageTagline","description","SecondaryNav","Messages","msgNotifRef","msg_notif_array","msgs_notifications","Conversations","match","location","search","useLocation","messages","setMessages","redirect","setRedirect","setFinishedLoading","messageList","URLSearchParams","conversationID","convoRef","searcher","has","providerRefTest","fullConvoRefTest","docSnapshot","exists","orderBy","querySnapshot","forEach","snapshot","messageID","message_sent_by","message","timestamp","getConversation","msgListResult","BookingDetails","finishedLoading","bookingdetalis","setBookingDetails","bookingRefID","bookingRef","bookingID","err","bookingrefID","Title","client_name","Text","service_requested","service_notes","client_email","Advertisements","ads","adchoice","setAdChoice","randomNumber","Math","floor","random","undefined","image","NonExistentStore","App","content","setContent","isPending","setIsPending","errorPage","setErrorPage","noNav","subdomainString","window","hostname","replace","getSubdomain","pathname","exact","path","Conversation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mIAiBIA,E,qICdEC,G,OAAMC,IAASC,cAAc,CAQ/BC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,kBAGNC,EAAS,CAQlBP,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,gBAIJT,GADKA,EAAIW,OACTX,G,eDnBVC,IAASW,KAAKC,OAIjBd,EAAKE,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GACvBX,EAAKE,IAASa,aA2ICC,MAtIjB,YAA8C,IAAnBC,EAAkB,EAAlBA,eACzB,EAAwBC,mBAAS,IAAjC,mBACA,GADA,UAC0BA,mBAAS,KAAnC,mBACA,GADA,UAC8BA,mBAAS,KAAvC,mBACA,GADA,UAC8BA,mBAAS,OAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,mBACVC,EAAaD,mBACbE,EAAWF,mBACXG,EAAaH,mBACbI,EAAWJ,mBAIXK,EAAoBV,EAAeW,gBAAgBC,SAbd,4CAuB3C,WAA6BC,GAA7B,+BAAAC,EAAA,6DACED,EAAEE,iBACIC,EAAWZ,EAAQa,QAAQC,MAC3BC,EAAYZ,EAASU,QAAQC,MAC7BE,EAAcd,EAAWW,QAAQC,MACjCG,EAAgBb,EAAWS,QAAQC,MACnCI,EAAeb,EAASQ,QAAQC,MACtCK,QAAQC,IAAI,SAAWR,GACvBO,QAAQC,IAAI,UAAYL,GACxBI,QAAQC,IAAI,YAAcJ,GAT5B,SAYIjB,GAAW,GACLsB,EAAcC,KAAKC,MACnBC,EAAW7C,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,uBAAuBF,WAAW,mBAAmBC,MACrHE,EAAaJ,EAASK,GAC5BV,QAAQC,IAAI,kBAAoBQ,GAhBpC,UAiBUJ,EAASM,IAAI,CAAC,kBAAqBd,EAAa,qBAAwB,SAAU,YAAeJ,EAAU,aAAgBG,EAAW,kBAAsBE,EAAe,cAAiBC,EAAc,UAAaG,EAAa,eAAkB,UAAW,qBAAwB,WAjBnS,yBAkBU1C,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,uBAAuBF,WAAW,mBAAmBC,IAAIE,GAAYH,WAAW,YAAYM,IAAI,CAAC,QAAWf,EAAa,YAAeJ,EAAU,aAAgBG,EAAW,gBAAmB,SAAU,UAAaM,EAAa,qBAAwB,WAlB3T,SAqBUW,EAAyBrD,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,wBAC7DM,MAAMC,KAA7B,uCAAkC,WAAOR,GAAP,iBAAAhB,EAAA,6DAC5ByB,EAA+BT,EAAIU,OAAOC,+BACnBF,EAA6BG,KAAKV,GAF7B,SAG1BI,EAAuBO,OAAO,CAAC,gCAAmC,EAAA1D,IAASa,UAAU8C,YAAWC,WAA9B,oBAA4CN,MAHpF,2CAAlC,uDAtBJ,kDA6BIhB,QAAQC,IAAI,mBACZrB,GAAW,GA9Bf,0DAvB2C,wBAyD7C,OAzCE2C,qBAAU,WACRvB,QAAQC,IAAI,gBAAkBuB,KAAKC,UAAUhD,MAG9C,IAqCY,OAAZE,EAEC,qCACE,8BACE,4CAEF,8BACA,cAAC+C,EAAA,EAAD,UACA,cAACA,EAAA,EAAKC,KAAN,UACE,eAACC,EAAA,EAAD,CAAMC,SAlE+B,4CAkErC,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYpB,GAAG,OAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKrD,EAASsD,YAAY,OAAOC,UAAQ,OAGrE,eAACR,EAAA,EAAKE,MAAN,CAAYpB,GAAG,QAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,oBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,QAAQC,IAAKlD,EAAUmD,YAAY,QAAQC,UAAQ,OAGxE,cAACR,EAAA,EAAKG,MAAN,6BACA,cAACH,EAAA,EAAKS,OAAN,CAAa,aAAW,iBAAxB,SAEClD,EAAkBmD,KAAI,SAACC,EAAMC,GAC5B,OACE,wBAAQN,IAAKjD,EAAYU,MAAO6C,EAAMC,WAAtC,SAAmDF,EAAKG,oBAO5D,eAACd,EAAA,EAAKE,MAAN,CAAYpB,GAAG,QAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,0BACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKhD,EAAUiD,YAAY,eAAeC,UAAQ,OAG9E,eAACR,EAAA,EAAKE,MAAN,CAAYpB,GAAG,UAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,sBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKnD,EAAYoD,YAAY,eAAeC,UAAQ,OAEhF,cAACO,EAAA,EAAD,CAAQV,KAAK,SAAb,oCAEA,cAACL,EAAA,EAAKG,MAAN,6DAgBN,8BAGGpD,EAAU,eAACiE,EAAA,EAAD,CAAOC,QAAQ,UAAf,mDAC8BpE,EAAeW,gBAAgB0D,WACtE,uBAFS,kCAGuBrE,EAAeW,gBAAgB0D,WAHtD,gCAKV,eAACF,EAAA,EAAD,CAAOC,QAAQ,SAAf,mDAEA,6B,QEtJQE,EAAQ,IAAfC,GAIKC,mIAAYC,KAeVC,ICZXC,EDYWD,EAbf,WAGE,OACE,sBAAKE,UAAU,OAAf,UACE,8EACA,uBACA,8F,YCFD3F,IAASW,KAAKC,QAMVZ,IAASD,MAAMc,YACpB6E,EAAmB1F,IAASD,MAAMc,YACtBb,IAASa,UAAU8C,WAAWiC,kBAPrC5F,IAASa,YACdb,IAASC,cAAcQ,GACvBiF,EAAmB1F,IAASa,YAChBb,IAASa,UAAU8C,WAAWiC,iBAQ9C,IAqBeC,EArBM,SAACC,GACpB,MAAwB9E,mBAAS,IAAjC,mBAAO+E,EAAP,KAAaC,EAAb,KAiBA,OAdAnC,qBAAU,WAER,IAAMoC,EAAQP,EAAiB9C,WAAW,oBAAoBC,IAAIiD,GACjEI,YAAW,SAAArD,GACR,IAAIsD,EACJA,EAAYtD,EAAIU,OAAO6C,eACvBJ,EAAQG,MAEZ,OAAO,kBAAMF,OAEZ,CAACH,IAIG,CAAEC,S,SCfIM,EAxBG,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,cAAeC,EAAqB,EAArBA,eAG1BR,EAASF,EAAaS,GAAtBP,KAER,OACE,qBAAKJ,UAAU,WAAf,SACGI,GAAQA,EAAKnB,KAAI,SAAC/B,EAAKiC,GAAN,OAChB,cAAC0B,EAAA,EAAOC,IAAR,CAAYd,UAAU,WACpBe,QAAM,EACNC,WAAY,CAAEC,QAAS,GAAIC,GAAC,EAC5BC,QAAS,kBAAMP,EAAe1D,EAAIkE,MAHpC,SAKE,cAACP,EAAA,EAAOQ,IAAR,CAAYC,IAAKpE,EAAIkE,IAAKG,IAAI,eAC5BC,QAAS,CAAEP,QAAS,GACpBQ,QAAS,CAAER,QAAS,GACpBS,WAAY,CAAEC,MAAO,MARaxC,SCY/ByC,EArBD,SAAC,GAAqC,IAAnChB,EAAkC,EAAlCA,eAAgBiB,EAAkB,EAAlBA,YAQ/B,OACE,cAAChB,EAAA,EAAOC,IAAR,CAAYd,UAAU,WAAWmB,QAPf,SAAClF,GACfA,EAAE6F,OAAOC,UAAUC,SAAS,aAC9BpB,EAAe,OAMfY,QAAS,CAAEP,QAAS,GACpBQ,QAAS,CAAER,QAAS,GAFtB,SAIE,cAACJ,EAAA,EAAOQ,IAAR,CAAYC,IAAKO,EAAaN,IAAI,eAChCC,QAAS,CAAES,EAAG,UACdR,QAAS,CAAEQ,EAAG,QCGP,SAASC,EAAT,GAAoC,IAAlB9G,EAAiB,EAAjBA,eAE7B,EAAsCC,mBAAS,MAA/C,mBAAOwG,EAAP,KAAoBjB,EAApB,KAEMuB,EAAe/G,EAAe+B,sBAUpC,OAAoB,OAAjBgF,EAEG,8CAIE,sBAAKnC,UAAU,UAAf,UACE,2CAECmC,GAAgB,cAAC,EAAD,CAAWxB,cAAewB,EAAcvB,eAAgBA,IACvEiB,GACA,cAAC,EAAD,CAAOA,YAAaA,EAAajB,eAAgBA,OAjC5DvG,IAASW,KAAKC,OAIZZ,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GAClBT,IAASa,a,aCKD,SAASkH,EAAT,GAAqC,IAAlBhH,EAAiB,EAAjBA,eAC9B,EAA0BC,mBAAS,IAAnC,mBACA,GADA,UAC0CA,oBAAS,IAAnD,mBAAOgH,EAAP,KAAsBC,EAAtB,KACA,EAAkCjH,oBAAS,GAA3C,mBACMkH,GADN,UACgBC,eAChB,EAAkDnH,mBAAS,MAA3D,mBAAOoH,EAAP,KAA0BC,EAA1B,KACA,EAAwDrH,mBAAS,MAAjE,mBAAOsH,EAAP,KAA6BC,EAA7B,KAEA,EAAgCvH,mBAAS,MAAzC,mBAAOW,EAAP,KAAiB6G,EAAjB,KAmDA,OAhDA3E,qBAAU,WAoCD,IAAI4E,SAAQ,SAACC,EAASC,GAC3BN,EAAqBtH,EAAeW,gBAAgBkH,oBACpDL,EAAwBxH,EAAeW,gBAAgBC,UAC5B,OAAxB2G,GAAsD,OAAtBF,IACjC9F,QAAQC,IAAI,yBAA2BuB,KAAKC,UAAUuE,IACtDhG,QAAQC,IAAI,sBAAwBuB,KAAKC,UAAUqE,IACnDM,QAzCerF,MAAK,WAClB,IACIwF,EACAC,EACAC,EAHAC,EAAY,GAIhB,IAAIH,EAAE,EAAGA,EAAIT,EAAkBxH,OAAQiI,IAAI,CAGvC,IADAE,EAAgB,GACZD,EAAE,EAAGA,EAAIR,EAAqB1H,OAAQkI,IACtCxG,QAAQC,IAAI,qBAAuB6F,EAAkBS,GAAK,kBAAoB/E,KAAKC,UAAUuE,EAAqBQ,KAC9GR,EAAqBQ,GAAGG,gBAAkBb,EAAkBS,GAAG9D,YAC/DgE,EAActF,KAAK6E,EAAqBQ,GAAG9D,cAE5C8D,IAAMR,EAAqB1H,OAAQ,IAElCoI,EAAWZ,EAAkBS,IAAOE,GAGzCF,IAAMT,EAAkBxH,OAAS,IAChC0B,QAAQC,IAAI,yBAA2BuB,KAAKC,UAAUpC,IACtDW,QAAQC,IAAI,qCACZiG,EAAYQ,GACZf,GAAiB,QAI1B,WACCC,EAAQzE,KAAK,eAIlB,CAAC6E,EAAsBF,KAgBL,IAAlBJ,EAGK,cAACkB,EAAA,EAAD,CAASC,UAAU,YAIvB7G,QAAQC,IAAI,2BACZD,QAAQC,IAAI,aAAeuB,KAAKC,UAAUpC,IAItC,mCAEA,gCACI,iDACA,uBAEI,8BACCyH,OAAOC,KAAK1H,GAAUiD,KAAI,SAAC0E,EAAKxE,GAG7B,OAFAxC,QAAQC,IAAI,QAAU+G,GACtBhH,QAAQC,IAAI,aAAeuB,KAAKC,UAAUpC,IAEtC,gCACI,mCAAM2H,EAAN,OACA,8BACK3H,EAAS2H,GAAK1E,KAAI,SAACC,EAAMgE,GACtB,OAAO,mCAAMhE,EAAN,0BA9FxC7E,IAASW,KAAKC,OAIZZ,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GAClBT,IAASa,a,YCyCH0I,MAnDf,YAAwC,IAElCC,EAFgBzI,EAAiB,EAAjBA,eAclB,OATAyI,EADiD,aAAhDzI,EAAeW,gBAAgB+H,aACjB,QAEqC,aAAhD1I,EAAeW,gBAAgB+H,aACtB,QAIA,QAGX,mCACE,sBAAK9D,UAAW6D,EAAhB,UACE,8BACE,cAAC,IAAD,CAAME,MAAO,CAAEC,eAAgB,QAAUC,GAAG,IAA5C,SACE,mCAAM7I,EAAeW,gBAAgB0D,WAArC,WAGJ,qBAAIO,UAAU,WAAd,UACA,6BACI,cAAC,IAAD,CAAM+D,MAAO,CAAEC,eAAgB,QAAUC,GAAG,YAA5C,SACE,8DAGJ,uBAEA,6BACE,cAAC,IAAD,CAAMF,MAAO,CAAEC,eAAgB,QAAUC,GAAG,mBAA5C,sCAIF,6BACE,cAAC,IAAD,CAAMF,MAAO,CAAEC,eAAgB,QAAUC,GAAG,WAA5C,uBAIF,6BACE,cAAC,IAAD,CAAMF,MAAO,CAAEC,eAAgB,QAAUC,GAAG,YAA5C,qCCVCC,MAjCf,YAA6C,IACrCC,EACAC,EACAC,EAHmBjJ,EAAiB,EAAjBA,eAuBvB,MAhBmD,aAAhDA,EAAeW,gBAAgB+H,cAC9BK,EAAkB,qBAClBC,EAAiB,mBACjBC,EAAmB,sBAEiC,aAAhDjJ,EAAeW,gBAAgB+H,cACnCK,EAAkB,qBAClBC,EAAiB,mBACjBC,EAAmB,uBAGnBF,EAAkB,qBAClBC,EAAiB,mBACjBC,EAAmB,sBAInB,sBAAKrE,UAAWmE,EAAhB,UAEI,qBAAInE,UAAWoE,EAAf,cAAiChJ,EAAeW,gBAAgB0D,cAChE,uBACA,qBAAIO,UAAWqE,EAAf,cAAmCjJ,EAAeW,gBAAgBuI,mBCwB/DC,ICtCXpK,ECdWuF,EAAQ,IAAfC,GACMD,EAAQ,IAETE,mIAAYC,KDapBxF,IAASW,KAAKC,OAIjBd,EAAKE,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GACvBX,EAAKE,IAASa,aAoHCsJ,IE3HbrK,EF2HaqK,EA/GjB,YAAwC,IAAnBpJ,EAAkB,EAAlBA,eACnB,EAAwBC,mBAAS,IAAjC,mBACA,GADA,UAC0BA,mBAAS,KAAnC,mBACA,GADA,UAC8BA,mBAAS,KAAvC,mBACA,GADA,UAC8BA,mBAAS,OAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACMC,EAAUC,mBACVC,EAAaD,mBACbE,EAAWF,mBAPoB,4CAarC,WAA6BQ,GAA7B,2BAAAC,EAAA,6DACED,EAAEE,iBACIC,EAAWZ,EAAQa,QAAQC,MAC3BC,EAAYZ,EAASU,QAAQC,MAC7BE,EAAcd,EAAWW,QAAQC,MAJzC,SASUO,EAAcC,KAAKC,MACnBC,EAAW7C,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,uBAAuBF,WAAW,iBAAiBC,MACnHE,EAAaJ,EAASK,GAXhC,UAaUL,EAASM,IAAI,CAAC,kBAAqBd,EAAa,qBAAwB,SAAU,YAAeJ,EAAU,aAAgBG,EAAW,UAAaM,EAAa,qBAAwB,WAblM,yBAcU1C,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,uBAAuBF,WAAW,iBAAiBC,IAAIE,GAAYH,WAAW,YAAYM,IAAI,CAAC,QAAWf,EAAa,YAAeJ,EAAU,aAAgBG,EAAW,gBAAmB,SAAU,UAAaM,EAAa,qBAAwB,WAdzT,SAiBU4H,EAActK,EAAG8C,WAAW,oBAAoBC,IAAI9B,EAAe+B,wBAC7DM,MAAMC,KAAlB,uCAAuB,WAAOR,GAAP,iBAAAhB,EAAA,6DACjBwI,EAAkBxH,EAAIU,OAAO+G,mBACND,EAAgB5G,KAAKV,GAF3B,SAGfqH,EAAY1G,OAAO,CAAC,oBAAuB,EAAA1D,IAASa,UAAU8C,YAAWC,WAA9B,oBAA4CyG,MAHxE,2CAAvB,uDAMAnJ,GAAW,GAxBf,kDA2BIoB,QAAQC,IAAI,mBACZrB,GAAW,GA5Bf,0DAbqC,wBA6CrC,OAAe,OAAZD,EAEC,qCACA,8BACE,4CAEF,+BACEA,GACF,cAAC+C,EAAA,EAAD,UACA,cAACA,EAAA,EAAKC,KAAN,UACE,eAACC,EAAA,EAAD,CAAMC,SAvDyB,4CAuD/B,UACE,eAACD,EAAA,EAAKE,MAAN,CAAYpB,GAAG,OAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,mBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKrD,EAASsD,YAAY,OAAOC,UAAQ,OAGrE,eAACR,EAAA,EAAKE,MAAN,CAAYpB,GAAG,QAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,oBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,QAAQC,IAAKlD,EAAUmD,YAAY,QAAQC,UAAQ,OAGxE,eAACR,EAAA,EAAKE,MAAN,CAAYpB,GAAG,UAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,sBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKnD,EAAYoD,YAAY,eAAeC,UAAQ,OAEhF,cAACO,EAAA,EAAD,CAAQV,KAAK,SAAb,sCAsBJ,8BACGtD,EAAU,eAACiE,EAAA,EAAD,CAAOC,QAAQ,UAAf,mDAC4BpE,EAAeW,gBAAgB0D,WACtE,uBAFW,kCAGqBrE,EAAeW,gBAAgB0D,WAHpD,gCAKX,eAACF,EAAA,EAAD,CAAOC,QAAQ,SAAf,mDAEA,6BE5GDnF,IAASW,KAAKC,OAIjBd,EAAKE,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GACvBX,EAAKE,IAASa,aAmMH0J,IC1MXzK,ED0MWyK,EA9Lf,YAA0C,EAAlBC,MAAkB,EAAXC,SAAY,IAEjCC,EAASC,cAAcD,OAI7B,EAAgC1J,mBAAS,IAAzC,mBAAO4J,EAAP,KAAiBC,EAAjB,KACA,EAAgC7J,oBAAS,GAAzC,mBAAO8J,EAAP,KAAiBC,EAAjB,KACA,EAA8C/J,oBAAS,GAAvD,mBAAwBgK,GAAxB,WACM3J,EAAaD,mBACf6J,EAAc,GAVoB,4CA6BtC,WAA6BrJ,GAA7B,2BAAAC,EAAA,6DACUiG,EAAe,IAAIoD,gBAAgBR,GAAQtH,IAAI,YAC/C+H,EAAiB,IAAID,gBAAgBR,GAAQtH,IAAI,QACvDxB,EAAEE,iBACIK,EAAcd,EAAWW,QAAQC,MACvCK,QAAQC,IAAI,YAAcJ,GAL9B,SAQcK,EAAcC,KAAKC,MAErBrB,EAAavB,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,iBAAiBC,IAAIsI,GAAgBvI,WAAW,YAAYC,MAExIuI,EAAWtL,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,iBAAiBC,IAAIsI,GAZ3G,UAcY9J,EAAW4B,IAAI,CAAC,QAAWd,EAAa,gBAAmB,SAAU,UAAaK,EAAa,qBAAwB,WAdnI,yBAeY4I,EAAS1H,OAAO,CAAC,kBAAqBvB,EAAa,qBAAwB,SAAU,UAAaK,EAAa,qBAAwB,WAfnJ,SAkBU4H,EAActK,EAAG8C,WAAW,oBAAoBC,IAAIiF,IAC9C1E,MAAMC,KAAlB,uCAAuB,WAAOR,GAAP,iBAAAhB,EAAA,6DACjBwI,EAAkBxH,EAAIU,OAAO+G,mBACND,EAAgB5G,KAAK0H,GAF3B,SAGff,EAAY1G,OAAO,CAAC,oBAAuB,EAAA1D,IAASa,UAAU8C,YAAWC,WAA9B,oBAA4CyG,MAHxE,2CAAvB,uDAKI/H,QAAQC,IAAI,iBAAmBJ,GAxBvC,kDA2BMG,QAAQC,IAAI,mBA3BlB,0DA7BsC,wBA4IpC,OAhIFsB,qBAAU,WAkDC,IAAI4E,SAAQ,SAACC,EAASC,GACzB,IAAM0C,EAAW,IAAIH,gBAAgBR,GAChCW,EAASC,IAAI,SAAcD,EAASC,IAAI,YAIzC5C,EAAQ,kBAHRC,EAAO,qBAnDFtF,MAAK,YA2DtB,WAGI,IAAMyE,EAAe,IAAIoD,gBAAgBR,GAAQtH,IAAI,YAC/C+H,EAAiB,IAAID,gBAAgBR,GAAQtH,IAAI,QACvD,OAAO,IAAIqF,SAAQ,SAACC,EAASC,GAEzB,IAAM4C,EAAkBzL,EAAG8C,WAAW,oBAAoBC,IAAIiF,GACxD0D,EAAmB1L,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,iBAAiBC,IAAIsI,GAC7GI,EAAgBnI,MACfC,MAAK,SAACoI,GAECA,EAAYC,OAKZF,EAAiBpI,MAChBC,MAAK,SAACoI,GAECA,EAAYC,OAMS5L,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,iBAAiBC,IAAIsI,GAAgBvI,WAAW,YACvH+I,QAAQ,YAAa,OACjCzF,WADD,uCACY,WAAO0F,GAAP,SAAA/J,EAAA,sDAER+J,EAAcC,SAAQ,SAACC,GAGnB,IAAMC,EAAYD,EAAS9I,GACxB8I,EAASvI,OAAOyI,gBAGff,EAAYxH,KAAK,CACjB,QAAWqI,EAASvI,OAAO0I,QAC3B,UAAaH,EAASvI,OAAO2I,UAC7B,gBAAmBJ,EAASvI,OAAOyI,gBACnC,UAAaD,OAazBrD,EAAQuC,GA1BI,2CADZ,uDALAtC,EAAO,kCARfA,EAAO,sCAxEfwD,GAAkB9I,MAAK,SAAC+I,GACpBvB,EAAYuB,GACZpB,GAAmB,MACpB,SAAC/I,GACAK,QAAQC,IAAIN,GACZ8I,GAAY,SAEjB,SAAC9I,GACAK,QAAQC,IAAIN,GACZ8I,GAAY,QAGjB,CAACL,EAAQE,IAiHPE,EACQ,cAAC,IAAD,CAAUlB,GAAG,MAKlB,qCAOI,8BACKgB,EAAShG,KAAI,SAACC,EAAMC,GACrB,OACI,6BAEI,6BACKD,EAAKoH,WAHLnH,QASjB,8BACA,cAACd,EAAA,EAAD,UACN,cAACA,EAAA,EAAKC,KAAN,UACE,eAACC,EAAA,EAAD,CAAMC,SAxKwB,4CAwK9B,UAEE,eAACD,EAAA,EAAKE,MAAN,CAAYpB,GAAG,UAAf,UACE,cAACkB,EAAA,EAAKG,MAAN,sBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKnD,EAAYoD,YAAY,eAAeC,UAAQ,OAEhF,cAACO,EAAA,EAAD,CAAQV,KAAK,SAAb,uCCtLPvE,IAASW,KAAKC,OAIjBd,EAAKE,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GACvBX,EAAKE,IAASa,aAuOHwL,MAlOf,YAA2C,EAAlB7B,MAAkB,EAAXC,SAAY,IAElCC,EAASC,cAAcD,OAI7B,EAAgC1J,mBAAS,IAAzC,mBAAO4J,EAAP,KAAiBC,EAAjB,KACA,EAAgC7J,oBAAS,GAAzC,mBAAO8J,EAAP,KAAiBC,EAAjB,KACA,EAA8C/J,oBAAS,GAAvD,mBAAOsL,EAAP,KAAwBtB,EAAxB,KACA,EAA4ChK,mBAAS,IAArD,mBAAOuL,EAAP,KAAuBC,EAAvB,KACMnL,EAAaD,mBACf6J,EAAc,GAXqB,4CAkCvC,WAA6BrJ,GAA7B,2BAAAC,EAAA,6DACUiG,EAAe,IAAIoD,gBAAgBR,GAAQtH,IAAI,YAC/CqJ,EAAe,IAAIvB,gBAAgBR,GAAQtH,IAAI,cACrDxB,EAAEE,iBACIK,EAAcd,EAAWW,QAAQC,MACvCK,QAAQC,IAAI,YAAcJ,GAL9B,SAQcK,EAAcC,KAAKC,MAErBrB,EAAavB,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,mBAAmBC,IAAI4J,GAAc7J,WAAW,YAAYC,MAExI6J,EAAa5M,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,mBAAmBC,IAAI4J,GAZ/G,UAcYpL,EAAW4B,IAAI,CAAC,QAAWd,EAAa,gBAAmB,SAAU,UAAaK,EAAa,qBAAwB,WAdnI,yBAeYkK,EAAWhJ,OAAO,CAAC,kBAAqBvB,EAAa,qBAAwB,SAAU,UAAaK,EAAa,qBAAwB,WAfrJ,SAkBUW,EAAyBrD,EAAG8C,WAAW,oBAAoBC,IAAIiF,IAC9C1E,MAAMC,KAA7B,uCAAkC,WAAOR,GAAP,iBAAAhB,EAAA,6DAC5ByB,EAA+BT,EAAIU,OAAOC,+BACnBF,EAA6BG,KAAKgJ,GAF7B,SAG1BtJ,EAAuBO,OAAO,CAAC,gCAAmC,EAAA1D,IAASa,UAAU8C,YAAWC,WAA9B,oBAA4CN,MAHpF,2CAAlC,uDAMIhB,QAAQC,IAAI,iBAAmBJ,GAzBvC,kDA4BMG,QAAQC,IAAI,mBA5BlB,0DAlCuC,wBAgKrC,OAnJFsB,qBAAU,WAuDC,IAAI4E,SAAQ,SAACC,EAASC,GACzB,IAAM0C,EAAW,IAAIH,gBAAgBR,GAChCW,EAASC,IAAI,eAAoBD,EAASC,IAAI,YAI/C5C,EAAQ,kBAHRC,EAAO,qBAxDFtF,MAAK,WAoIX,IAAIoF,SAAQ,SAACC,EAASC,GACzB,IAAMb,EAAe,IAAIoD,gBAAgBR,GAAQtH,IAAI,YAC/CuJ,EAAY,IAAIzB,gBAAgBR,GAAQtH,IAAI,cAC1BtD,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,mBAAmBC,IAAI8J,GAC9FvJ,MAAMC,MAAK,SAACR,GACxB2J,EAAkB3J,EAAIU,QACtBmF,EAAQ6D,MACT,SAACK,GACAjE,EAAOiE,SA3ISvJ,MAAK,YA+DjC,WAGI,IAAMyE,EAAe,IAAIoD,gBAAgBR,GAAQtH,IAAI,YAC/CyJ,EAAe,IAAI3B,gBAAgBR,GAAQtH,IAAI,cACrD,OAAO,IAAIqF,SAAQ,SAACC,EAASC,GAEzB,IAAM4C,EAAkBzL,EAAG8C,WAAW,oBAAoBC,IAAIiF,GACxD0D,EAAmB1L,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,mBAAmBC,IAAIgK,GAC/GtB,EAAgBnI,MACfC,MAAK,SAACoI,GAECA,EAAYC,OAKZF,EAAiBpI,MAChBC,MAAK,SAACoI,GAECA,EAAYC,OAMS5L,EAAG8C,WAAW,oBAAoBC,IAAIiF,GAAclF,WAAW,mBAAmBC,IAAIgK,GAAcjK,WAAW,YACvH+I,QAAQ,YAAa,OACjCzF,WADD,uCACY,WAAO0F,GAAP,SAAA/J,EAAA,sDAER+J,EAAcC,SAAQ,SAACC,GAGnB,IAAMC,EAAYD,EAAS9I,GACxB8I,EAASvI,OAAOyI,gBAGff,EAAYxH,KAAK,CACjB,QAAWqI,EAASvI,OAAO0I,QAC3B,UAAaH,EAASvI,OAAO2I,UAC7B,gBAAmBJ,EAASvI,OAAOyI,gBACnC,UAAaD,OAazBrD,EAAQuC,GA1BI,2CADZ,uDALAtC,EAAO,kCARfA,EAAO,sCA5EXwD,GAAkB9I,MAAK,WACnBwH,EAAYI,GACZD,GAAmB,MACpB,SAAC/I,GACAK,QAAQC,IAAIN,GACZ8I,GAAY,SAElB,SAAC6B,GACCtK,QAAQC,IAAI,mBAAqBqK,SAEtC,SAAC3K,GACAK,QAAQC,IAAIN,GACZ8I,GAAY,QAGjB,CAACL,EAAQE,IAgIPE,EACQ,cAAC,IAAD,CAAUlB,GAAG,MAKlB,mCAEQ0C,EACI,gCACI,cAACtI,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,KAAN,WACI,cAACD,EAAA,EAAK8I,MAAN,UACKP,EAAeQ,cAEpB,eAAC/I,EAAA,EAAKgJ,KAAN,WACKT,EAAeU,kBACfV,EAAeW,cACfX,EAAeY,qBAI5B,uBAGA,8BACCvC,EAAShG,KAAI,SAACC,EAAMC,GACrB,OACI,6BAEI,6BACKD,EAAKoH,WAHLnH,QASb,8BACI,cAACd,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,KAAN,UACI,eAACC,EAAA,EAAD,CAAMC,SAxMH,4CAwMH,UAEA,eAACD,EAAA,EAAKE,MAAN,CAAYpB,GAAG,UAAf,UACI,cAACkB,EAAA,EAAKG,MAAN,sBACA,cAACH,EAAA,EAAKI,QAAN,CAAcC,KAAK,OAAOC,IAAKnD,EAAYoD,YAAY,eAAeC,UAAQ,OAElF,cAACO,EAAA,EAAD,CAAQV,KAAK,SAAb,sCAMd,+CC/LX6I,MAzCf,YAA2C,EAAjBrM,eAAkB,IACpCsM,EAAM,CACV,CAAC,MAAS,OAAQ,IAAO,IACzB,CAAC,MAAS,SAAU,IAAO,IAC3B,CAAC,MAAS,MAAO,IAAO,IACxB,CAAC,MAAS,cAAe,IAAO,IAChC,CAAC,MAAS,aAAc,IAAO,IAC/B,CAAC,MAAS,aAAc,IAAO,IAC/B,CAAC,MAAS,MAAO,IAAO,IACxB,CAAC,MAAS,eAAgB,IAAO,IACjC,CAAC,MAAS,iBAAkB,IAAO,IACnC,CAAC,MAAS,gBAAiB,IAAO,KAGpC,EAAgCrM,mBAAS,MAAzC,mBAAOsM,EAAP,KAAiBC,EAAjB,KAQA,OANF1J,qBAAU,WACR,IAAM2J,EAAeC,KAAKC,MAAsB,GAAhBD,KAAKE,UACrCJ,EAAYF,EAAIG,MAEf,IAEe,OAAbF,QAAkCM,IAAbN,EAElB,oCAIJhL,QAAQC,IAAI,WAAauB,KAAKC,UAAUuJ,IAEpC,mCACE,sBAAK3H,UAAU,SAAf,mBAEG2H,EAASO,MACTP,EAASvG,WCnCP1B,EAAQ,IAAfC,GAIKC,mIAAYC,KAeVsI,ICQXhG,EACAhI,EDTWgO,EAbf,WAGE,OACE,sBAAKnI,UAAU,OAAf,UACE,8EACA,uBACA,kGCYSN,EAAQ,IAAfC,GACMD,EAAQ,IAIjBrF,IAASW,KAAKC,OAIjBd,EAAKE,IAASD,MAAMc,aAHpBb,IAASC,cAAcQ,GACvBX,EAAKE,IAASa,aAOH0E,mIAAYC,KAuHVuI,MArHf,WAEE,MAA8B/M,mBAAS,MAAvC,mBAAOgN,EAAP,KAAgBC,EAAhB,KACA,EAAkCjN,oBAAS,GAA3C,mBAAOkN,EAAP,KAAkBC,EAAlB,KACM1D,EAAWE,cACjB,EAAkC3J,oBAAS,GAA3C,mBAAOoN,EAAP,KAAkBC,EAAlB,KACA,EAA0BrN,oBAAS,GAAnC,mBAAOsN,EAAP,KA+BA,OA/BA,KAGAzK,qBAAU,YAMV,WACE,IAAM0K,EAAkBC,OAAO/D,SAASgE,UAExC3G,GADAA,EAAeyG,EAAgBG,QAAQ,kBAAmB,KAC9BA,QAAQ,aAAc,MAGhD5O,EAAG8C,WAAW,oBAAoBC,IAAIiF,GACrC1E,MAAMC,MAAK,SAACR,GACDA,EAAI6I,QAEJuC,EAAW,CAAC,sBAA0BpL,EAAIG,GAAI,gBAAkBH,EAAIU,SACpE4K,GAAa,IAGbE,GAAa,MAnB3BM,KAEC,CAACX,EAASI,EAAWE,KAyBP,IAAdF,EAEC,cAAC,EAAD,IAKc,OAAZJ,QAAkCJ,IAAZI,GAA4BA,EAOlD,sCAEIM,GAAU,cAAC,EAAD,CAAYvN,eAAgBiN,IAEf,MAAtBvD,EAASmE,WAAuBN,GACjC,8BACE,cAAC,EAAD,MAIJ,eAAC,IAAD,WAEE,eAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAAC,EAAD,CAAiBnI,eAAgBiN,OAGnC,cAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAlB,SACE,gCACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAACnB,EAAD,CAAUhH,eAAgBiN,SAI9B,eAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,mBAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAAC,EAAD,CAAgBnI,eAAgBiN,OAGlC,eAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,2BAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAAC,EAAD,OAGF,eAAC,IAAD,CAAO2F,OAAK,EAACC,KAAK,WAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAACrB,EAAD,CAAS9G,eAAgBiN,OAG3B,eAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,YAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACZ8E,GAAW,cAAC,EAAD,CAAUjN,eAAgBiN,OAGxC,eAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,iBAAlB,UACEZ,GAAa,cAAChF,EAAA,EAAD,IACb,cAAC6F,EAAD,OAGF,cAAC,IAAD,UACE,cAAC,EAAD,YAvDN,cAAC7F,EAAA,EAAD,CAASC,UAAU,YC7EZ6F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7L,MAAK,YAAkD,IAA/C8L,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.824e6229.chunk.js","sourcesContent":["//=========================================================================\n//              CLIENT PAGE FOR INITIATING BOOKING REQUEST \n//=========================================================================\n\nimport \"../styles.css\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Alert, Form, Button, Card } from \"react-bootstrap\";\n// import DropdownButton from 'react-bootstrap/DropdownButton'\n// import Dropdown from 'react-bootstrap/Dropdown'\n// import Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction BookingRequest ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  const serviceRef = useRef()\n  const notesRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n  const offerred_services = serviceContent.service_content.services\n\n\n  useEffect(()=>{\n    console.log(\"store content\" + JSON.stringify(serviceContent))\n    //.then()\n    \n}, [])\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    const serviceChosen = serviceRef.current.value\n    const serviceNotes = notesRef.current.value\n    console.log(\"Name: \" + nameSent)\n    console.log(\"Email: \" + emailSent)\n    console.log(\"Message: \" + messageSent)\n    \n    try{\n      setSuccess(true)\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('bookingrequests').doc()\n      const convorefID = convoref.id\n      console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"service_requested\" : serviceChosen, \"service_notes\": serviceNotes, \"timestamp\": currentTime, \"booking_status\": \"pending\", \"provider_read_status\": \"unread\"})\n      await db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('bookingrequests').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n      \n      const bookingRequestNotifRef = db.collection('serviceProviders').doc(serviceContent.service_provider_name)\n      bookingRequestNotifRef.get().then(async (doc)=>{\n        let booking_requests_notif_array = doc.data().booking_requests_notifications\n        let temp_msg_notif_array = booking_requests_notif_array.push(convorefID)\n        await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n      })      \n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false)\n    }\n}\n\nif(success === null){\n  return (\n    <>\n      <div>\n        <h2>Services</h2> \n      </div>\n      <div>\n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n\n          <Form.Label>Select Service</Form.Label>\n          <Form.Select aria-label=\"Select Service\">\n\n          {offerred_services.map((item, index)=>{\n            return(\n              <option ref={serviceRef} value={index.toString()}>{item.service_name}</option>\n            )\n            \n          })}\n          </Form.Select>\n\n          \n          <Form.Group id=\"notes\">\n            <Form.Label>Extra Notes</Form.Label>\n            <Form.Control type=\"text\" ref={notesRef} placeholder=\"Type message\" required />\n          </Form.Group>\n\n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Submit Booking Request</Button>\n\n          <Form.Label>Input service time using calendar:</Form.Label>\n        </Form>\n        </Card.Body>\n        </Card>\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n\n  )\n}\nelse{\n  return (\n    <div>\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert> :\n       <Alert variant=\"danger\">\n       Error occurred, please contact support\n       <br/>\n     </Alert>} \n    </div>\n    );\n}\n    \n  }\n   \n  export default BookingRequest;","import firebase from \"firebase/compat/app\"\nimport \"firebase/compat/auth\"\n\nconst app = firebase.initializeApp({\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n})\n\nexport const config = {\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n}\n\nexport const auth = app.auth();\nexport default app","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentRoute() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Use navigation bar above to navigate to existing pages </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentRoute;\n","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {auth, config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nlet projectFirestore;\nlet timestamp;\nlet admin_data;\n\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n    projectFirestore = firebase.firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n    projectFirestore = firebase.app().firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  }\n\nconst useFirestore = (provider_name) => {\n  const [docs, setDocs] = useState([]);\n  \n\n  useEffect(() => {\n    \n    const unsub = projectFirestore.collection(\"serviceProviders\").doc(provider_name)\n    .onSnapshot(doc => {\n        let documents;\n        documents = doc.data().gallery_images;\n        setDocs(documents);\n    });\n    return () => unsub();\n    \n  }, [provider_name]);\n\n  \n\n  return { docs };\n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ provider_Name, setSelectedImg }) => {\n\n\n  const { docs } = useFirestore(provider_Name);\n\n  return (\n    <div className=\"img-grid\">\n      {docs && docs.map((doc, index) => (\n        <motion.div className=\"img-wrap\" key={index} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <motion.img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {config} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\n\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport { Spinner } from \"react-bootstrap\";\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\nexport default function Gallery({serviceContent}) {\n \n    const [selectedImg, setSelectedImg] = useState(null);\n    // const [providerName, setProviderName] = useState(null)\n    const providerName = serviceContent.service_provider_name\n\n\n\n    // useEffect(()=>{\n        \n    //     setProviderName(serviceContent.service_provider_name)\n\n    // }, [])\n\n    if(providerName === null){\n        return(\n          <h4> Loading... </h4>\n        )\n    }else{\n        return (\n            <div className=\"Gallery\">\n              <h2> Gallery </h2>\n\n              {providerName && <ImageGrid provider_Name={providerName} setSelectedImg={setSelectedImg} />}\n              { selectedImg && (\n                <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n              )}\n            </div>\n          );\n    }\n\n\n  \n\n}","import React, { useState, useEffect } from \"react\";\nimport { Card, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n// import 'react-pro-sidebar/dist/css/styles.css';\nimport {auth, config} from '../firebase';\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\nexport default function Services({serviceContent}) {\n    const [error, setError] = useState(\"\")\n    const [servicesReady, setServicesReady] = useState(false)\n    const [loggedIn, setIsloggedIn] = useState(true)\n    const history = useHistory()\n    const [serviceCategories, setServiceCategories] = useState(null)\n    const [serviceSubCategories, setServiceSubCategories] = useState(null)\n    //setServices(services => ({...services, ...servicesB}))\n    const [services, setServices] = useState(null)\n\n\n    useEffect(()=>{\n        dataReadyCheck().then(()=>{\n            var servicesB = {}\n            var i;\n            var j;\n            var serviceHolder;\n            for(i=0; i < serviceCategories.length; i++){\n                //set key in services object i.e. {main categoryM: \"\"}\n                serviceHolder = []\n                for(j=0; j < serviceSubCategories.length; j++){\n                    console.log(\"service category: \" + serviceCategories[i] + \" service name: \" + JSON.stringify(serviceSubCategories[j]))\n                    if (serviceSubCategories[j].main_category === serviceCategories[i].toString()){\n                        serviceHolder.push(serviceSubCategories[j].service_name)\n                    }\n                    if(j === serviceSubCategories.length -1){\n                        //i.e. {maincategory1 : [subcategory1, subcategory2...subcategoryN]..., maincategoryM: []}\n                        servicesB[ serviceCategories[i] ] = serviceHolder\n                    }\n                }\n                if(i === serviceCategories.length - 1){\n                    console.log(\"Services inside loop: \" + JSON.stringify(services))\n                    console.log(\"ServiceReady has been set to true\")\n                    setServices(servicesB)\n                    setServicesReady(true)\n                }\n                \n            }\n        }, ()=>{\n            history.push('/admin')\n        })\n        \n        \n    }, [serviceSubCategories, serviceCategories])\n\n\n    function dataReadyCheck(){\n      return new Promise((resolve, reject)=>{\n        setServiceCategories(serviceContent.service_content.service_categories)\n        setServiceSubCategories(serviceContent.service_content.services)\n        if(serviceSubCategories!== null && serviceCategories !== null){\n          console.log(\"Servicesubcategories: \" + JSON.stringify(serviceSubCategories))\n          console.log(\"Servicecategories: \" + JSON.stringify(serviceCategories))\n          resolve()\n        }\n      })\n    }\n\n\n    if(servicesReady === false){\n        // console.log(\"ServiceReady = false atm\")\n        return(\n            <Spinner animation=\"border\"/>\n        )\n    }\n    else{\n        console.log(\"ServiceReady = true atm\")\n        console.log(\"services: \" + JSON.stringify(services))\n\n\n        return (\n            <>\n\n            <div>\n                <h1> Services page </h1>\n                <br></br>\n\n                    <div>\n                    {Object.keys(services).map((key, index)=>{\n                        console.log(\"key: \" + key)\n                        console.log(\"Services: \" + JSON.stringify(services))\n                        return(\n                            <div>\n                                <h3> {key} </h3>\n                                <div>\n                                    {services[key].map((item, i) =>{\n                                        return(<h4> {item} </h4>)\n                                    })}\n                                </div>\n                            </div>\n                        )\n                    })}\n                    </div>\n\n            </div>\n\n            </>\n        )\n    }\n}","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Navigation({ serviceContent }){\n\n  var topNavColour;\n\n  if(serviceContent.service_content.page_styling === \"choice_1\"){\n    topNavColour = \"nav-1\";\n}\nelse if(serviceContent.service_content.page_styling === \"choice_2\"){\n  topNavColour = \"nav-2\";\n    \n}\nelse{\n  topNavColour = \"nav-3\";\n}\n    return(\n      <>\n        <nav className={topNavColour}>\n          <div>\n            <Link style={{ textDecoration: 'none' }} to=\"/\">\n              <h2> {serviceContent.service_content.page_title} </h2>\n            </Link>\n          </div>\n          <ul className=\"nav-link\">\n          <li>\n              <Link style={{ textDecoration: 'none' }} to=\"/services\">\n                <h4> Service Info & Pricing </h4>\n              </Link>\n            </li>\n            <li>\n            </li>\n            <li>\n              <Link style={{ textDecoration: 'none' }} to=\"/booking-request\">\n                Availability & Booking\n              </Link>\n            </li>\n            <li>\n              <Link style={{ textDecoration: 'none' }} to=\"/gallery\">\n                Gallery\n              </Link>\n            </li>\n            <li>\n              <Link style={{ textDecoration: 'none' }} to=\"/messages\">\n                Send Message\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </>\n    );\n}\n\nexport default Navigation\n","\n\nfunction BackgroundImage({ serviceContent }){\n    var backgroundImage;\n    var frontPageTitle;\n    var frontPageTagline;\n\n    // console.log(\"service content:\" + JSON.stringify(serviceContent))\n\n    if(serviceContent.service_content.page_styling === \"choice_1\"){\n        backgroundImage = \"background-image-1\";\n        frontPageTitle = \"frontPageTitle-1\";\n        frontPageTagline = \"frontPageTagline-1\";\n    }\n    else if(serviceContent.service_content.page_styling === \"choice_2\"){\n        backgroundImage = \"background-image-2\";\n        frontPageTitle = \"frontPageTitle-2\";\n        frontPageTagline = \"frontPageTagline-2\";\n    }\n    else{\n        backgroundImage = \"background-image-3\";\n        frontPageTitle = \"frontPageTitle-3\";\n        frontPageTagline = \"frontPageTagline-3\";\n    }\n\n    return(\n        <div className={backgroundImage}>\n            {/* <h3 style={{color: \"white\", fontWeight:\"bold\"}}> Service Provider Name goes here and tagline </h3> */}\n            <h1 className={frontPageTitle}> {serviceContent.service_content.page_title}</h1>\n            <br></br>\n            <h3 className={frontPageTagline}> {serviceContent.service_content.description}</h3>\n        </div>\n    )\n}\n\nexport default BackgroundImage","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction SecondaryNav({ serviceContent }){\n    \n    var secondaryNavColour;\n\n  if(serviceContent.service_content.page_styling === \"choice_1\"){\n    secondaryNavColour = \"nav-1a\";\n}\nelse if(serviceContent.service_content.page_styling === \"choice_2\"){\n    secondaryNavColour = \"nav-2a\";\n    \n}\nelse{\n    secondaryNavColour = \"nav-3a\";\n}\n\n    return(\n      <>\n        <nav className={secondaryNavColour}>\n          <ul className=\"nav-link\">\n            <li>\n              <Link to=\"/\">\n                View Services\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/calendar\">\n                View Availability\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/booking-request\">\n                Send Booking Request\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/gallery\">\n                Gallery\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/messages\">\n                Send Message\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </>\n    );\n}\n\nexport default SecondaryNav\n","//=========================================================================\n//            CLIENT PAGE FOR INITIATING MESSAGE TO PROVIDER   \n//=========================================================================\n\n\nimport \"../styles.css\";\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\n// import Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction Messages ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    // console.log(\"Name: \" + nameSent)\n    // console.log(\"Email: \" + emailSent)\n    // console.log(\"Message: \" + messageSent)\n    try{\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('conversations').doc()\n      const convorefID = convoref.id\n      // console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      await db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('conversations').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      \n      // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n      const msgNotifRef = db.collection('serviceProviders').doc(serviceContent.service_provider_name)\n      msgNotifRef.get().then(async (doc)=>{\n        let msg_notif_array = doc.data().msgs_notifications\n        let temp_msg_notif_array = msg_notif_array.push(convorefID)\n        await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n      })\n\n      setSuccess(true)\n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false);\n    }\n}\n\n  if(success === null){\n    return (\n      <>\n      <div>\n        <h2>Messages</h2> \n      </div>\n      <div>\n      {!success && \n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n          \n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Send Message</Button>\n        </Form>\n        </Card.Body>\n        </Card>}\n\n\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      \n\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n    );\n\n  }     \n  else{\n    return(\n      <div>\n        {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert>   :\n        <Alert variant=\"danger\">\n        Error occurred, please contact support\n        <br/>\n      </Alert>\n        }\n\n      </div>\n      \n    )\n  }\n\n}\n   \n  export default Messages;","import React, {useState, useEffect} from 'react';\nimport { Spinner } from 'react-bootstrap';\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\nconst port = process.env.PORT || 5000;\n\nconst Calendar = ({ bookings_events }) => {\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n\n\n  useEffect(() => {\n    var data = {}\n    var datatosend;\n    const socket = io();\n    socket.connect(`http://localhost:${port}`);\n    \n    return new Promise((resolve, reject) =>{\n      socket.on(\"store_check\", (info)=>{\n        socket.disconnect();\n        //subdomain = domain.hostname\n        \n        data[\"store_name\"] = info.store_name\n        datatosend = data\n        \n        document.title = info.store_name;\n        if(datatosend !== undefined){\n          resolve(datatosend)\n        }\n        \n      })\n      \n    }).then(()=>{\n      console.log(\"data to send is: \" + JSON.stringify(datatosend))\n      axios.post(\"https://us-central1-dashtest-7cb07.cloudfunctions.net/getStoreContent\", datatosend)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        setIsPending(false);\n        setContent(data);\n      })\n    })\n\n  }, [])\n\n    return (\n      <div className=\"Calendar\">\n          { isPending && <div> <Spinner animation=\"border\"/> </div> }\n          {content && <h1> {content.service_provider_name}'s calendar events - React page </h1>}\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n      </div>\n    );\n  }\n   \n  export default Calendar;","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO MESSAGE \n//=========================================================================\n\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction Conversations({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    // const [firebaseConversationID, setfirebaseConversationID] = useState(\"\") \n\n    const [messages, setMessages] = useState([])\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const messageRef = useRef()\n    var messageList = [];\n\n    useEffect(()=>{\n\n        paramCheck().then(()=>{\n            getConversation().then((msgListResult)=>{\n                setMessages(msgListResult)\n                setFinishedLoading(true)\n            }, (value)=>{\n                console.log(value)\n                setRedirect(true)\n            })\n        }, (value)=>{\n            console.log(value)\n            setRedirect(true)\n        })\n        \n    }, [search, messages])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const convoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRef.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          await convoRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n       \n          // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n        const msgNotifRef = db.collection('serviceProviders').doc(providerName)\n        msgNotifRef.get().then(async (doc)=>{\n          let msg_notif_array = doc.data().msgs_notifications\n          let temp_msg_notif_array = msg_notif_array.push(conversationID)\n          await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n        })\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n    function paramCheck(){\n        return new Promise((resolve, reject)=>{\n            const searcher = new URLSearchParams(search)\n            if(!(searcher.has('chat')) || !(searcher.has('provider'))){\n                reject(\"missing params\");\n            }\n            else{\n                resolve(\"params present\")\n            }\n        })\n    }\n\n    function getConversation(){\n        // const providerName = location.query.provider\n        // const conversationID = location.query.chat\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        return new Promise((resolve, reject)=>{ \n            // console.log(\"running get convo function\")\n            const providerRefTest = db.collection('serviceProviders').doc(providerName)\n            const fullConvoRefTest = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n            providerRefTest.get()\n            .then((docSnapshot)=>{\n                // console.log(\"got 1st snap\")\n                if(!docSnapshot.exists){\n                    // console.log(\"retailer does not exist\")\n                    reject(\"conversation does not exist\")\n                }\n                else{\n                    fullConvoRefTest.get()\n                    .then((docSnapshot)=>{\n                        // console.log(\"got 2nd snap\")\n                        if(!docSnapshot.exists){\n                            // console.log(\"convo does not exist\")\n                            reject(\"conversation does not exist\")\n                        }\n                        else{\n\n                            const fullConvoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages')\n                            fullConvoRef.orderBy('timestamp', 'asc')\n                            .onSnapshot(async (querySnapshot)=>{\n                                // console.log(\"got messages snap\")\n                                querySnapshot.forEach((snapshot) =>{\n                                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                                    // console.log(\"messageList inside snapshot loop: \" + JSON.stringify(messageList))\n                                    const messageID = snapshot.id\n                                    if(snapshot.data().message_sent_by === \"client\"){\n                                        //place unread colour or notification on message\n                                        // console.log(\"adding client msg\")\n                                        messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }else{\n                                    //simply place message\n                                    //   console.log(\"adding provider msg\")\n                                    messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }\n                                    \n                                })\n                            // console.log(\"MSGList inside function\" + JSON.stringify(messageList))\n                            resolve(messageList);\n                            })\n                            \n                        }\n                        \n                    })\n                }\n            })\n          \n        })\n        \n      }\n\n      if(redirect){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {/* {loading ? <Spinner animation=\"border\"/> : <> <h3>firebase conversationID:</h3> {firebaseConversationID} </>}\n                 <h3>firebase conversationID:</h3> {firebaseConversationID}\n                 <p>\n                    {JSON.stringify(location)}\n                 </p> */}\n    \n                <div>\n                    {messages.map((item, index)=>{\n                    return(\n                        <li key={index}>\n                            {/* color={item.message_sent_by} */}\n                            <h4>\n                                {item.message}\n                            </h4>\n                        </li>\n                    )\n                    })}\n                </div>\n                <div>\n                <Card>\n          <Card.Body>\n            <Form onSubmit={onFormSubmit}>\n              \n              <Form.Group id=\"message\">\n                <Form.Label>Message</Form.Label>\n                <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n              </Form.Group>\n              <Button type=\"submit\">Send Message</Button>\n            </Form>\n            </Card.Body>\n            </Card>\n                </div>\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default Conversations","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO BOOKING REQUEST \n//=========================================================================\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction BookingDetails({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    // const [firebaseConversationID, setfirebaseConversationID] = useState(\"\") \n\n    const [messages, setMessages] = useState([])\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const [bookingdetalis, setBookingDetails] = useState('')\n    const messageRef = useRef()\n    var messageList = [];\n\n    useEffect(()=>{\n\n        paramCheck().then(()=>{\n            getBookingDetails().then(()=>{\n                getConversation().then(()=>{\n                    setMessages(messageList)\n                    setFinishedLoading(true)\n                }, (value)=>{\n                    console.log(value);\n                    setRedirect(true)\n                })\n            },(err)=>{\n                console.log(\"error occurred: \" + err);\n            })\n        }, (value)=>{\n            console.log(value)\n            setRedirect(true)\n        })\n        \n    }, [search, messages])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingRefID = new URLSearchParams(search).get('bookingref')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const bookingRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRef.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          await bookingRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n        // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n        \n        const bookingRequestNotifRef = db.collection('serviceProviders').doc(providerName)\n        bookingRequestNotifRef.get().then(async (doc)=>{\n          let booking_requests_notif_array = doc.data().booking_requests_notifications\n          let temp_msg_notif_array = booking_requests_notif_array.push(bookingRefID)\n          await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n        })\n\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n    function paramCheck(){\n        return new Promise((resolve, reject)=>{\n            const searcher = new URLSearchParams(search)\n            if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n                reject(\"missing params\");\n            }\n            else{\n                resolve(\"params present\")\n            }\n        })\n    }\n\n    function getConversation(){\n        // const providerName = location.query.provider\n        // const conversationID = location.query.chat\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingrefID = new URLSearchParams(search).get('bookingref')\n        return new Promise((resolve, reject)=>{ \n            // console.log(\"running get convo function\")\n            const providerRefTest = db.collection('serviceProviders').doc(providerName)\n            const fullConvoRefTest = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingrefID)\n            providerRefTest.get()\n            .then((docSnapshot)=>{\n                // console.log(\"got 1st snap\")\n                if(!docSnapshot.exists){\n                    // console.log(\"retailer does not exist\")\n                    reject(\"conversation does not exist\")\n                }\n                else{\n                    fullConvoRefTest.get()\n                    .then((docSnapshot)=>{\n                        // console.log(\"got 2nd snap\")\n                        if(!docSnapshot.exists){\n                            // console.log(\"convo does not exist\")\n                            reject(\"conversation does not exist\")\n                        }\n                        else{\n\n                            const fullConvoRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingrefID).collection('messages')\n                            fullConvoRef.orderBy('timestamp', 'asc')\n                            .onSnapshot(async (querySnapshot)=>{\n                                // console.log(\"got messages snap\")\n                                querySnapshot.forEach((snapshot) =>{\n                                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                                    // console.log(\"messageList inside snapshot loop: \" + JSON.stringify(messageList))\n                                    const messageID = snapshot.id\n                                    if(snapshot.data().message_sent_by === \"client\"){\n                                        //place unread colour or notification on message\n                                        // console.log(\"adding client msg\")\n                                        messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }else{\n                                    //simply place message\n                                    //   console.log(\"adding provider msg\")\n                                    messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }\n                                    \n                                })\n                            // console.log(\"MSGList inside function\" + JSON.stringify(messageList))\n                            resolve(messageList);\n                            })\n                            \n                        }\n                        \n                    })\n                }\n            })\n          \n        })\n        \n      }\n\n      function getBookingDetails(){\n        return new Promise((resolve, reject)=>{\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingID = new URLSearchParams(search).get('bookingref')\n            const bookingDeetsRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingID)\n            bookingDeetsRef.get().then((doc)=>{\n                setBookingDetails(doc.data())\n                resolve(bookingdetalis)\n            }, (err)=>{\n                reject(err)\n            })\n        })\n    }\n\n      if(redirect){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {\n                    finishedLoading ?\n                        <div>\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>\n                                        {bookingdetalis.client_name}\n                                    </Card.Title>\n                                    <Card.Text>\n                                        {bookingdetalis.service_requested}\n                                        {bookingdetalis.service_notes}\n                                        {bookingdetalis.client_email}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            <br/>\n\n        \n                            <div>\n                            {messages.map((item, index)=>{\n                            return(\n                                <li key={index}>\n                                    {/* color={item.message_sent_by} */}\n                                    <h4>\n                                        {item.message}\n                                    </h4>\n                                </li>\n                            )\n                            })}\n                            </div>\n                            <div>\n                                <Card>\n                                    <Card.Body>\n                                        <Form onSubmit={onFormSubmit}>\n                                        \n                                        <Form.Group id=\"message\">\n                                            <Form.Label>Message</Form.Label>\n                                            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                                        </Form.Group>\n                                        <Button type=\"submit\">Send Message</Button>\n                                        </Form>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        </div>\n                        : <h4>Loading...</h4>\n\n                }\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default BookingDetails","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Advertisements({ serviceContent }){\n  const ads = [\n    {\"image\": \"Nike\", \"url\": \"\"}, \n    {\"image\": \"Adidas\", \"url\": \"\"}, \n    {\"image\": \"PLT\", \"url\": \"\"},\n    {\"image\": \"Mac Make up\", \"url\": \"\"},\n    {\"image\": \"Missguided\", \"url\": \"\"},\n    {\"image\": \"Boohoo.com\", \"url\": \"\"},\n    {\"image\": \"Ugg\", \"url\": \"\"},\n    {\"image\": \"Calvin Klein\", \"url\": \"\"},\n    {\"image\": \"Chanel Perfume\", \"url\": \"\"},\n    {\"image\": \"Prada Perfume\", \"url\": \"\"}\n  ] \n\n  const [adchoice, setAdChoice] = useState(null)\n    \nuseEffect(()=>{\n  const randomNumber = Math.floor(Math.random() * 11);\n  setAdChoice(ads[randomNumber])\n\n}, [])\n\n  if(adchoice === null || adchoice === undefined){\n    return(\n        <h5> </h5>\n    )\n  }\n  else{\n    console.log(\"adchoice\" + JSON.stringify(adchoice))\n    return(\n        <>\n          <div className=\"ad-box\">\n            Ad box\n            {adchoice.image}\n            {adchoice.url}\n          </div>\n        </>\n      );\n  }\n}\n\nexport default Advertisements\n","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentStore() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Navigate to servviio.com to create a site for your service </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentStore;\n","//import logo from './logo.svg';\nimport Home from './store_pages/BookingRequest'\nimport {BrowserRouter as Router, Route, Switch, useLocation} from 'react-router-dom';\nimport Lost from './store_pages/NonExistentRoute';\nimport './App.css';\nimport React, {useState, useEffect} from 'react';\nimport Gallery from './store_pages/Gallery';\nimport Services from './store_pages/Services';\nimport Navigation from './store_components/Navigation';\nimport BackgroundImage from './store_components/BackgroundImage';\nimport SecondaryNav from './store_components/SecondaryNav';\nimport Calendar from './store_pages/Calendar';\nimport BookingRequest from './store_pages/BookingRequest';\nimport Messages from './store_pages/Messages';\nimport Conversations from './store_pages/Conversation';\nimport BookingDetails from './store_pages/BookingDetails';\nimport { Spinner } from 'react-bootstrap';\nimport Advertisements from './store_pages/components/Advertisements';\nimport NonExistentRoute from './store_pages/NonExistentRoute';\nimport NonExistentStore from './store_pages/NonExistentStore';\n\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\";\nimport {config} from './firebase';\n\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\nvar providerName;\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction App() {\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const location = useLocation();\n  const [errorPage, setErrorPage] = useState(false)\n  const [noNav, setNoNav] = useState(false)\n\n\n  useEffect(() => {\n    getSubdomain()\n\n  }, [content, errorPage, noNav])\n\n\n  function getSubdomain(){\n    const subdomainString = window.location.hostname\n    providerName = subdomainString.replace('.myservviio.com', '')\n    providerName = providerName.replace('.localhost', '')\n\n    if(providerName){\n      db.collection(\"serviceProviders\").doc(providerName)\n      .get().then((doc) => {\n              if (doc.exists) {\n                  // console.log(\"Store exists: \" + JSON.stringify(doc.data()))\n                  setContent({\"service_provider_name\" : doc.id, \"service_content\":doc.data()})\n                  setIsPending(false)\n              } else {\n                  // console.log(\"No such provider!\");\n                  setErrorPage(true)\n              }\n      })\n    }\n    \n\n\n  }\n  if(errorPage === true){\n    return(\n      <NonExistentStore/>\n    )\n  }\n  else{\n\n    if((content === null) || (content === undefined) || (!content)){\n      return (\n        <Spinner animation=\"border\"/>\n      )\n    }\n    else{\n      return (\n        <>\n        \n         {(!noNav) && <Navigation serviceContent={content} />}\n  \n          {((location.pathname !== \"/\") && (!noNav)) && \n            <div>\n              <Advertisements/>\n            </div>\n          }\n  \n          <Switch>\n  \n            <Route exact path=\"/\">\n            { isPending && <Spinner/> }\n              <BackgroundImage serviceContent={content}/>\n            </Route>\n  \n            <Route exact path=\"/services\">\n              <div>\n              { isPending && <Spinner/> }\n                <Services serviceContent={content} />\n              </div>\n            </Route>\n  \n            <Route exact path=\"/booking-request\">\n            { isPending && <Spinner/> }\n              <BookingRequest serviceContent={content} />\n            </Route>\n  \n            <Route exact path=\"/booking-request/details\">\n            { isPending && <Spinner/> }\n              <BookingDetails />\n            </Route>\n  \n            <Route exact path=\"/gallery\">\n            { isPending && <Spinner/> }\n              <Gallery serviceContent={content} />\n            </Route>\n  \n            <Route exact path=\"/messages\">\n            { isPending && <Spinner/> }\n              {content && <Messages serviceContent={content} />}\n            </Route>\n  \n            <Route exact path=\"/conversations\">\n            { isPending && <Spinner/> }\n              <Conversations />\n            </Route>\n  \n            <Route>\n              <NonExistentRoute/>\n            </Route>\n            \n          </Switch>\n        </>\n        \n      );\n    }\n  }\n\n  \n\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}