{"version":3,"sources":["store_pages/BookingRequest.js","firebase.js","store_pages/NonExistentRoute.js","store_pages/hooks/useFirestore.js","store_pages/hooks/useServiceList.js","store_pages/components/ImageGrid.js","store_pages/components/Modal.js","store_pages/Gallery.js","store_pages/Services.js","store_components/Navigation.js","store_components/BackgroundImage.js","store_pages/Messages.js","store_pages/Calendar.js","store_pages/hooks/useGetConvo.js","store_pages/Conversation.js","store_pages/hooks/useGetBookingMessages.js","store_pages/hooks/useGetBookingDetails.js","store_pages/BookingDetails.js","store_pages/components/Advertisements.js","store_pages/NonExistentStore.js","App.js","reportWebVitals.js","index.js"],"names":["db","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","config","auth","apps","length","firestore","BookingRequest","serviceContent","useState","success","setSuccess","nameRef","useRef","messageRef","emailRef","serviceRef","notesRef","offerred_services","service_content","services","e","a","preventDefault","nameSent","current","value","emailSent","messageSent","serviceChosen","serviceNotes","console","log","currentTime","Date","now","convoref","collection","doc","site_name","convorefID","id","set","add","then","bookingRequestNotifRef","get","booking_requests_notif_array","data","booking_requests_notifications","push","update","FieldValue","arrayUnion","useEffect","JSON","stringify","Card","Body","Form","onSubmit","Group","Label","Control","type","ref","placeholder","required","Select","map","item","index","toString","service_name","Button","Alert","variant","page_title","require","io","process","PORT","NonExistentRoute","projectFirestore","className","serverTimestamp","useFirestore","provider_name","docs","setDocs","unsub","onSnapshot","documents","gallery_images","ImageGrid","provider_Name","setSelectedImg","Spinner","animation","layout","whileHover","opacity","s","onClick","url","src","alt","initial","animate","transition","delay","Modal","selectedImg","motion","div","target","classList","contains","img","y","Gallery","providerName","useServiceList","setServices","servicesFB","serviceCategoriesFB","Promise","resolve","reject","service_categories","result","i","j","serviceHolder","servicesArray","serviceSubCategories","serviceCategories","servicesB","main_category","Services","Header","Object","keys","ListGroup","values","service","Item","Title","Subtitle","price","duration","Text","description","Navigation","page_theme","theme_name","page_styling","style","themes","colors","background","textDecoration","text","to","BackgroundImage","imgUrl","page_background_image","text_colour","title_tagline_colour","hex_code","Calendar","Messages","msgNotifRef","msg_notif_array","msgs_notifications","useGetConvo","messages","setMessages","search","useLocation","searcher","URLSearchParams","has","conversationID","orderBy","querySnapshot","messageList","forEach","snapshot","messageID","message_sent_by","message","timestamp","Conversations","match","location","messageRefFB","convoRef","useGetBookingMessages","bookingRefID","useGetBookingDetails","bookingDetails","setBookingDetails","bookingID","BookingDetails","bookingdetails","bookingRef","client_name","service_requested","service_notes","client_email","Advertisements","ads","adchoice","setAdChoice","randomNumber","Math","floor","random","undefined","image","NonExistentStore","App","content","setContent","setIsPending","errorPage","setErrorPage","noNav","subdomainString","window","hostname","replace","exists","getSubdomain","pathname","exact","path","Conversation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95b16514.chunk.js","sourcesContent":["//=========================================================================\n//              CLIENT PAGE FOR INITIATING BOOKING REQUEST \n//=========================================================================\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Alert, Form, Button, Card } from \"react-bootstrap\";\n// import DropdownButton from 'react-bootstrap/DropdownButton'\n// import Dropdown from 'react-bootstrap/Dropdown'\n// import Alert from '@mui/material/Alert';\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction BookingRequest ({ serviceContent }) {\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  const serviceRef = useRef()\n  const notesRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n  const offerred_services = serviceContent.service_content.services\n\n\n  useEffect(()=>{\n    console.log(\"store content\" + JSON.stringify(serviceContent))\n    //.then()\n    \n}, [])\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    const serviceChosen = serviceRef.current.value\n    const serviceNotes = notesRef.current.value\n    console.log(\"Name: \" + nameSent)\n    console.log(\"Email: \" + emailSent)\n    console.log(\"Message: \" + messageSent)\n    \n    try{\n      setSuccess(true)\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.site_name).collection('bookingrequests').doc()\n      const convorefID = convoref.id\n      console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"service_requested\" : serviceChosen, \"service_notes\": serviceNotes, \"timestamp\": currentTime, \"booking_status\": \"pending\", \"provider_read_status\": \"unread\"})\n      db.collection('serviceProviders').doc(serviceContent.site_name).collection('bookingrequests').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      .then(()=>{\n        messageRef.current.value = ''\n      })\n      // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n      \n      const bookingRequestNotifRef = db.collection('serviceProviders').doc(serviceContent.site_name)\n      bookingRequestNotifRef.get().then(async (doc)=>{\n        let booking_requests_notif_array = doc.data().booking_requests_notifications\n        let temp_msg_notif_array = booking_requests_notif_array.push(convorefID)\n        await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n      })      \n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false)\n    }\n}\n\nif(success === null){\n  return (\n    <>\n      <div>\n        <h2>Services</h2> \n      </div>\n      <div>\n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n\n          <Form.Label>Select Service</Form.Label>\n          <Form.Select aria-label=\"Select Service\">\n\n          {offerred_services.map((item, index)=>{\n            return(\n              <option ref={serviceRef} value={index.toString()}>{item.service_name}</option>\n            )\n            \n          })}\n          </Form.Select>\n\n          \n          <Form.Group id=\"notes\">\n            <Form.Label>Extra Notes</Form.Label>\n            <Form.Control type=\"text\" ref={notesRef} placeholder=\"Type message\" required />\n          </Form.Group>\n\n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Submit Booking Request</Button>\n\n          <Form.Label>Input service time using calendar:</Form.Label>\n        </Form>\n        </Card.Body>\n        </Card>\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n\n  )\n}\nelse{\n  return (\n    <div>\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert> :\n       <Alert variant=\"danger\">\n       Error occurred, please contact support\n       <br/>\n     </Alert>} \n    </div>\n    );\n}\n    \n  }\n   \n  export default BookingRequest;","import firebase from \"firebase/compat/app\"\nimport \"firebase/compat/auth\"\n\nconst app = firebase.initializeApp({\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n})\n\nexport const config = {\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n}\n\nexport const auth = app.auth();\nexport default app","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentRoute() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Use navigation bar above to navigate to existing pages </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentRoute;\n","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {auth, config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nlet projectFirestore;\nlet timestamp;\nlet admin_data;\n\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n    projectFirestore = firebase.firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n    projectFirestore = firebase.app().firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  }\n\nconst useFirestore = (provider_name) => {\n  const [docs, setDocs] = useState([]);\n  \n\n  useEffect(() => {\n    \n    const unsub = projectFirestore.collection(\"serviceProviders\").doc(provider_name)\n    .onSnapshot(doc => {\n        let documents;\n        documents = doc.data().gallery_images;\n        setDocs(documents);\n    });\n    return () => unsub();\n    \n  }, [provider_name]);\n\n  \n\n  return { docs };\n}\n\nexport default useFirestore;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\nconst useServiceList = (providerName) => {\n//   const [services, setServices] = useState([]);\n//   const [categories, setCategories] = useState([]);\n    console.log(\"admin_data in useServicList: \" + providerName)\n    const [services, setServices] = useState(null)\n    console.log(\"serviceList render ran again...\")\n  \n\n//   useEffect(() => {\n\n    useEffect(()=>{\n        const unsub =  db.collection(\"serviceProviders\").doc(providerName)\n        .onSnapshot((doc) => {\n            let servicesFB;\n            let serviceCategoriesFB\n            return new Promise((resolve, reject)=>{\n                servicesFB = doc.data().services  \n                serviceCategoriesFB = doc.data().service_categories       \n                console.log(\"useEffect serviceList ran again...\")\n                resolve({\"services\": servicesFB, \"serviceCategories\": serviceCategoriesFB})\n            }).then(async (result)=>{\n                return new Promise((resolve, reject)=>{\n                    let servicesArray = [];\n                    let serviceSubCategories = result.services\n                    let serviceCategories = result.serviceCategories\n\n                    \n                    var i;\n                    var j;\n                    var serviceHolder;\n                    if(serviceSubCategories && serviceCategories){\n\n                        console.log(\"services and categories set\")\n                        for(i=0; i < serviceCategories.length; i++){\n                            //set key in services object i.e. {main categoryM: \"\"}\n                            var servicesB = {}\n                            serviceHolder = []\n                            for(j=0; j < serviceSubCategories.length; j++){\n                                console.log(\"service category: \" + serviceCategories[i] + \" service name: \" + JSON.stringify(serviceSubCategories[j]))\n                                if (serviceSubCategories[j].main_category === serviceCategories[i].toString()){\n                                    serviceHolder.push(serviceSubCategories[j])\n                                }\n                                if(j === serviceSubCategories.length -1){\n                                    //i.e. {maincategory1 : [subcategory1, subcategory2...subcategoryN]..., maincategoryM: []}\n                                    servicesB[ serviceCategories[i] ] = serviceHolder\n                                    servicesArray.push(servicesB)\n                                }\n                            }\n                            if(i === serviceCategories.length - 1){\n                                console.log(\"Services inside loop: \" + JSON.stringify(servicesB))\n                                console.log(\"ServiceReady has been set to true\")\n                                // setServices(servicesB)\n                                // setServicesReady(true)\n                                resolve(servicesArray)\n                            }\n                            \n                        }\n                    }\n                        console.log(\"numbers is about to change/cause rerender...\")\n                        // setNumber((value + 10));\n                })\n            }).then((result)=>{\n                setServices(result)\n            })\n                \n\n        });\n    return () => unsub();\n}, [])\n\n\n    // const unsub =  db.collection(\"serviceProviders\").where(\"email\", \"==\", provider_email)\n    // .onSnapshot(doc => {\n    //     let servicesList;\n    //     let categoryList;\n\n    //     servicesList = doc.data().services;\n    //     categoryList = doc.data().services;\n\n    //     setServices(servicesList);              \n    //     setCategories(categoryList);\n    //     console.log(\"serviceList subscription ran...\")\n    // });\n    // return () => unsub();\n        \n    \n\n    \n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n//   }, []);\n\n  \n\n  return services\n}\n\nexport default useServiceList;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\nimport { Spinner } from 'react-bootstrap';\n\nconst ImageGrid = ({ provider_Name, setSelectedImg }) => {\n\n\n  const { docs } = useFirestore(provider_Name);\n\n  return (\n    <div className=\"img-grid\">\n      {!docs && <Spinner animation=\"border\"/>}\n      {docs && docs.map((doc, index) => (\n        <div className=\"img-wrap\" key={index} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {config} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\n\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport { Spinner } from \"react-bootstrap\";\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\nexport default function Gallery({serviceContent}) {\n \n    const [selectedImg, setSelectedImg] = useState(null);\n    // const [providerName, setProviderName] = useState(null)\n    const providerName = serviceContent.site_name\n\n\n\n    // useEffect(()=>{\n        \n\n    // }, [])\n\n    if(providerName === null){\n        return(\n          <h4> Loading... </h4>\n        )\n    }else{\n        return (\n          <>\n          <h2> Gallery </h2>\n          {(serviceContent.service_content.gallery_images.length === 0) ? \n            <h2>No Images Added Yet</h2>\n            :\n            <div className=\"Gallery\">\n              \n\n              \n\n              {providerName && <ImageGrid provider_Name={providerName} setSelectedImg={setSelectedImg} />}\n              { selectedImg && (\n                <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n              )}\n            </div>\n          }\n          </>\n          );\n\n    }\n\n\n  \n\n}","import React, { useEffect, useState, useRef} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useServiceList from './hooks/useServiceList'\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport {config} from '../firebase';\nimport { Card, Button, Alert, Spinner, ListGroup, Modal, Form } from \"react-bootstrap\";\n\n\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\nfunction Services({ serviceContent }){\n    console.log(\"Calendar rerendered\")\n    console.log(\"admin_data in Calendar: \" + serviceContent.site_name)\n    const services = useServiceList(serviceContent.site_name)\n\n    \n    if(serviceContent.service_content.service_categories.length !== 0){\n        if(services === null){\n            return(\n                <>\n                    <Spinner animation=\"border\" />\n                </>\n                \n            )\n        }\n        else{\n            return(\n        \n                <>\n                    \n                    <div>\n                        {/* {console.log(\"\" + JSON.stringify(services))} */}\n                        {services.map((item, index)=>{\n                            return(\n                                <>\n                                <Card>\n                                    {/* <Card.Img> </Card.Img> */}\n                                    <Card.Header>\n                                        {Object.keys(item)[0]} \n                                        <br/>\n                                        \n                                    </Card.Header>\n                                    \n                                    <ListGroup variant=\"flush\">\n                                        {Object.values(item)[0].map((service, i) =>{\n                                            return(\n                                                <>\n                                                <Card>\n                                                    {/* <Button onClick={deleteService(item.service_name)}> Delete Service </Button> */}\n                                                <ListGroup.Item>\n                                                    \n                                                    <Card.Title> \n                                                        {service.service_name}\n                                                        <br/>\n                                                    </Card.Title>\n                                    \n                                                        <br/>\n                                                    <Card.Subtitle> \n                                                        Price: {service.price}\n                                                    </Card.Subtitle>\n                                                    <br/>\n                                                    <Card.Subtitle>\n                                                    Duration: {service.duration}\n                                                    </Card.Subtitle>\n                                                \n                                                    <br/>\n                                                    <Card.Text>\n                                                        {service.description}\n                                                    </Card.Text>\n                                                    </ListGroup.Item>\n                                                \n                                                </Card>\n                                                <br/>\n                                                </>\n                                            )\n                                        })}\n                                    </ListGroup>\n                                </Card>\n                                <br/>\n                                <br/>\n                                </>\n                            )\n                            \n                        })}\n                        \n                    </div>\n                </>\n                );\n        }\n    \n    }\n    else{\n        return(\n            <h2>No Services Added Yet</h2>\n        )\n    }\n\n    \n\n        \n    }\n\nexport default Services\n","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport * as themes from '../themes.json';\nfunction Navigation({ serviceContent }){\n  const page_theme = serviceContent.service_content.page_theme.theme_name\n\n  var topNavColour;\n\n  if(serviceContent.service_content.page_styling === \"choice_1\"){\n    topNavColour = \"nav-1\";\n}\nelse if(serviceContent.service_content.page_styling === \"choice_2\"){\n  topNavColour = \"nav-2\";\n    \n}\nelse{\n  topNavColour = \"nav-3\";\n}\n    return(\n      <>\n        <nav style={{\"background-color\": themes.themes[page_theme].colors.background, \"height\": \"15vh\"}}>\n          <div>\n            <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/\">\n              {serviceContent.service_content.page_title}\n            </Link>\n          </div>\n          <ul className=\"nav-link\">\n          <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\"}}>\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/services\">\n                Service Info & Pricing\n              </Link>\n            </li>\n            <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\"}}>\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/booking-request\">\n                  Availability & Booking\n              </Link>\n            </li>\n            <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\"}}>\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/gallery\">\n                  Gallery              \n              </Link>\n            </li>\n            <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\"}}>\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/messages\">\n                  Send Message\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </>\n    );\n}\n\nexport default Navigation\n","\n\nfunction BackgroundImage({ serviceContent }){\n    var backgroundImage;\n    var frontPageTitle;\n    var frontPageTagline;\n\n    const imgUrl = serviceContent.service_content.page_background_image.url\n    const text_colour = serviceContent.service_content.title_tagline_colour.hex_code\n\n\n    console.log(\"background image URL:\" + imgUrl)\n\n    // if(serviceContent.service_content.page_styling === \"choice_1\"){\n    //     backgroundImage = \"background-image-1\";\n    //     frontPageTitle = \"frontPageTitle-1\";\n    //     frontPageTagline = \"frontPageTagline-1\";\n    // }\n    // else if(serviceContent.service_content.page_styling === \"choice_2\"){\n    //     backgroundImage = \"background-image-2\";\n    //     frontPageTitle = \"frontPageTitle-2\";\n    //     frontPageTagline = \"frontPageTagline-2\";\n    // }\n    // else{\n    //     backgroundImage = \"background-image-3\";\n    //     frontPageTitle = \"frontPageTitle-3\";\n    //     frontPageTagline = \"frontPageTagline-3\";\n    // }\n    \n\n    return(\n        <>\n        {/* <img src={imgUrl} id=\"background_img\" alt=\"background_img\" className=\"bg\"/>\n        <h1 style={{\"font-weight\": \"bold\", \"color\": \"white\", \"text-align\": \"centre\"}}> {serviceContent.service_content.page_title}</h1>\n        <br></br>\n        <h3 style={{\"font-weight\": \"bold\", \"color\": \"white\", \"text-align\": \"centre\"}}> {serviceContent.service_content.description}</h3> */}\n\n        \n        <div style={{\"background-image\": `url(${imgUrl})`,\n        \"background-repeat\": \"no-repeat\", \"background-attachment\": \"fixed\", \"background-size\": \"100% 100%\",   \n        \"min-height\": \"85%\", \"max-height\": \"85%\", \"opacity\": \"0.4\", \"min-width\": \"1024px\", \"width\": \"100%\",\n        \"height\": \"auto\", \"position\": \"fixed\",\n        \"bottom\": \"0\",\"left\": \"0\"}}>\n            {/* <h3 style={{color: \"white\", fontWeight:\"bold\"}}> Service Provider Name goes here and tagline </h3> */}\n        </div>\n        <h1 style={{\"font-weight\": \"bold\", \"color\": text_colour, \"text-align\": \"center\"}}> {serviceContent.service_content.page_title}</h1>\n            <br></br>\n        <h3 style={{\"font-weight\": \"bold\", \"color\": text_colour, \"text-align\": \"center\"}}> {serviceContent.service_content.description}</h3>\n\n        </>\n            )\n}\n\nexport default BackgroundImage","//=========================================================================\n//            CLIENT PAGE FOR INITIATING MESSAGE TO PROVIDER   \n//=========================================================================\n\n\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\n// import Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction Messages ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    // console.log(\"Name: \" + nameSent)\n    // console.log(\"Email: \" + emailSent)\n    // console.log(\"Message: \" + messageSent)\n    try{\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.site_name).collection('conversations').doc()\n      const convorefID = convoref.id\n      // console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      await db.collection('serviceProviders').doc(serviceContent.site_name).collection('conversations').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      \n      // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n      const msgNotifRef = db.collection('serviceProviders').doc(serviceContent.site_name)\n      msgNotifRef.get().then(async (doc)=>{\n        let msg_notif_array = doc.data().msgs_notifications\n        let temp_msg_notif_array = msg_notif_array.push(convorefID)\n        await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n      })\n\n      setSuccess(true)\n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false);\n    }\n}\n\n  if(success === null){\n    return (\n      <>\n      <div>\n        <h2>Messages</h2> \n      </div>\n      <div>\n      {!success && \n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n          \n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Send Message</Button>\n        </Form>\n        </Card.Body>\n        </Card>}\n\n\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      \n\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n    );\n\n  }     \n  else{\n    return(\n      <div>\n        {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert>   :\n        <Alert variant=\"danger\">\n        Error occurred, please contact support\n        <br/>\n      </Alert>\n        }\n\n      </div>\n      \n    )\n  }\n\n}\n   \n  export default Messages;","import React, {useState, useEffect} from 'react';\nimport { Spinner } from 'react-bootstrap';\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\nconst port = process.env.PORT || 5000;\n\nconst Calendar = ({ serviceContent }) => {\n\n  // const [content, setContent] = useState(null);\n  // const [isPending, setIsPending] = useState(true);\n\n\n  \n\n    return (\n      <div className=\"Calendar\">\n          <h1> {serviceContent.site_name}'s calendar events - React page </h1>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n      </div>\n    );\n  }\n   \n  export default Calendar;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\n\nconst useGetConvo = () => {\n  const [messages, setMessages] = useState([]);\n//   const [unreadMessages, setUnreadMessages] = useState([]);\n  const search = useLocation().search;\n\n    // console.log(\"useGetBookingMessages location and location query...\" + JSON.stringify(location) + '' + JSON.stringify(location.query))\n    \n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('chat')) || !(searcher.has('provider'))){\n            setMessages(\"DN_EXIST\")\n            // setUnreadMessages(\"DN_EXIST\")\n        }else{\n            // var messageList = [];\n            // var unreadMessageList = []\n            const providerName = new URLSearchParams(search).get('provider')\n            const conversationID = new URLSearchParams(search).get('chat')\n            const unsub =  db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages')\n            .orderBy('timestamp', 'asc')\n            .onSnapshot(async (querySnapshot)=>{\n                let messageList = [];\n                // let unreadMessageList = []\n                console.log(\"convo hook rerunning\")\n                querySnapshot.forEach((snapshot) =>{\n                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                    const messageID = snapshot.id\n                    if(snapshot.data().message_sent_by === \"client\"){\n                        //place unread colour or notification on message\n                        // console.log(\"adding client msg\")\n                        messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }else{\n                    //simply place message\n                    //   console.log(\"adding provider msg\")\n                    messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }\n                    \n                })\n                setMessages(messageList)\n                // setUnreadMessages(unreadMessageList)\n                \n                \n            }, ()=>{\n                // console.log(\"not resetting messageList\")\n                // setUnreadMessages(\"DN_EXIST\")\n                setMessages(\"DN_EXIST\")\n            })\n            return () => unsub();\n            \n        }\n    }, [])\n    console.log(\"messages: \" + JSON.stringify(messages))\n\n    return messages\n}\n\nexport default useGetConvo;","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO MESSAGE \n//=========================================================================\n\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\nimport useGetConvo from './hooks/useGetConvo';\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction Conversations({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    // const [firebaseConversationID, setfirebaseConversationID] = useState(\"\") \n\n    // const [messages, setMessages] = useState([])\n    const messages = useGetConvo()\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const messageRef = useRef()\n    var messageList = [];\n\n    // useEffect(()=>{\n        \n    // }, [])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRefFB = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const convoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRefFB.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          convoRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          .then(()=>{\n            messageRef.current.value = ''\n          })\n       \n          // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n        const msgNotifRef = db.collection('serviceProviders').doc(providerName)\n        msgNotifRef.get().then(async (doc)=>{\n          let msg_notif_array = doc.data().msgs_notifications\n          let temp_msg_notif_array = msg_notif_array.push(conversationID)\n          await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n        })\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n\n\n\n      if(messages === \"DN_EXIST\"){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {messages ?\n                <>\n                    <div>\n                        {messages.map((item, index)=>{\n                        return(\n                            <li key={index}>\n                                {/* color={item.message_sent_by} */}\n                                <h4>\n                                    {item.message}\n                                </h4>\n                            </li>\n                        )\n                        })}\n                    </div>\n                    <div>\n                        <Card>\n                            <Card.Body>\n                                <Form onSubmit={onFormSubmit}>\n                                \n                                <Form.Group id=\"message\">\n                                    <Form.Label>Message</Form.Label>\n                                    <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                                </Form.Group>\n                                <Button type=\"submit\">Send Message</Button>\n                                </Form>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                </>\n                :\n                <Spinner animation='border'/>\n                }\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default Conversations","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\n\nconst useGetBookingMessages = () => {\n  const [messages, setMessages] = useState([]);\n//   const [unreadMessages, setUnreadMessages] = useState([]);\n  const search = useLocation().search;\n\n    // console.log(\"useGetBookingMessages location and location query...\" + JSON.stringify(location) + '' + JSON.stringify(location.query))\n    \n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n            setMessages(\"DN_EXIST\")\n            // setUnreadMessages(\"DN_EXIST\")\n        }else{\n            // var messageList = [];\n            // var unreadMessageList = []\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingRefID = new URLSearchParams(search).get('bookingref')\n            const unsub = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages')\n            .orderBy('timestamp', 'asc')\n            .onSnapshot(async (querySnapshot)=>{\n                let messageList = [];\n                // let unreadMessageList = []\n                console.log(\"convo hook rerunning\")\n                querySnapshot.forEach((snapshot) =>{\n                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                    const messageID = snapshot.id\n                    if(snapshot.data().message_sent_by === \"client\"){\n                        //place unread colour or notification on message\n                        // console.log(\"adding client msg\")\n                        messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }else{\n                    //simply place message\n                    //   console.log(\"adding provider msg\")\n                    messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }\n                    \n                })\n                setMessages(messageList)\n                // setUnreadMessages(unreadMessageList)\n                \n                \n            }, ()=>{\n                // console.log(\"not resetting messageList\")\n                // setUnreadMessages(\"DN_EXIST\")\n                setMessages(\"DN_EXIST\")\n            })\n            return () => unsub();\n            \n        }\n    }, [])\n    console.log(\"messages: \" + JSON.stringify(messages))\n\n    return messages\n}\n\nexport default useGetBookingMessages;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\nconst useGetBookingDetails = () => {\n    const [bookingDetails, setBookingDetails] = useState(null);\n    const search = useLocation().search;\n  \n\n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n            setBookingDetails(\"DN_EXIST\")\n        }else{\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingID = new URLSearchParams(search).get('bookingref')\n                \n            const unsub =  db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingID)\n            .onSnapshot((doc) => {\n                setBookingDetails(doc.data())\n            }, ()=>{\n                setBookingDetails(\"DN_EXIST\")\n            });\n            \n            return () => unsub();\n            \n            \n        }\n}, [])\n\n  \n\n  return bookingDetails\n}\n\nexport default useGetBookingDetails;","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO BOOKING REQUEST \n//=========================================================================\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\nimport useGetBookingMessages from './hooks/useGetBookingMessages';\nimport useGetBookingDetails from './hooks/useGetBookingDetails';\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction BookingDetails({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    const messages = useGetBookingMessages()\n    const bookingdetails = useGetBookingDetails()\n    const messageRef = useRef()\n\n    // useEffect(()=>{\n        \n        \n    // }, [search, messages])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingRefID = new URLSearchParams(search).get('bookingref')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n            //create new message doc for this new message provider has just typed\n            const messageRefFB = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages').doc()\n            // update the 'most recent message sent field in the conversations collection doc'\n            const bookingRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID)\n            //   console.log(\"convorefID is: \" + convorefID)\n            await messageRefFB.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n            bookingRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n            .then(()=>{\n                messageRef.current.value = ''\n            })\n            // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n        \n            const bookingRequestNotifRef = db.collection('serviceProviders').doc(providerName)\n            bookingRequestNotifRef.get().then(async (doc)=>{\n            let booking_requests_notif_array = doc.data().booking_requests_notifications\n            let temp_msg_notif_array = booking_requests_notif_array.push(bookingRefID)\n            await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n            })\n\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n\n      if((bookingdetails === \"DN_EXIST\" || messages === \"DN_EXIST\")){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {\n                    (bookingdetails && messages) ?\n                        <div>\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>\n                                        {bookingdetails.client_name}\n                                    </Card.Title>\n                                    <Card.Text>\n                                        {bookingdetails.service_requested}\n                                        {bookingdetails.service_notes}\n                                        {bookingdetails.client_email}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            <br/>\n\n        \n                            <div>\n                            {messages.map((item, index)=>{\n                            return(\n                                <li key={index}>\n                                    {/* color={item.message_sent_by} */}\n                                    <h4>\n                                        {item.message}\n                                    </h4>\n                                </li>\n                            )\n                            })}\n                            </div>\n                            <div>\n                                <Card>\n                                    <Card.Body>\n                                        <Form onSubmit={onFormSubmit}>\n                                        \n                                        <Form.Group id=\"message\">\n                                            <Form.Label>Message</Form.Label>\n                                            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                                        </Form.Group>\n                                        <Button type=\"submit\">Send Message</Button>\n                                        </Form>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        </div>\n                    : <Spinner animation='border'/>\n\n                }\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default BookingDetails","import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Advertisements({ serviceContent }){\n  const ads = [\n    {\"image\": \"Nike\", \"url\": \"\"}, \n    {\"image\": \"Adidas\", \"url\": \"\"}, \n    {\"image\": \"PLT\", \"url\": \"\"},\n    {\"image\": \"Mac Make up\", \"url\": \"\"},\n    {\"image\": \"Missguided\", \"url\": \"\"},\n    {\"image\": \"Boohoo.com\", \"url\": \"\"},\n    {\"image\": \"Ugg\", \"url\": \"\"},\n    {\"image\": \"Calvin Klein\", \"url\": \"\"},\n    {\"image\": \"Chanel Perfume\", \"url\": \"\"},\n    {\"image\": \"Prada Perfume\", \"url\": \"\"}\n  ] \n\n  const [adchoice, setAdChoice] = useState(null)\n    \nuseEffect(()=>{\n  const randomNumber = Math.floor(Math.random() * 11);\n  if(adchoice !== null){\n    setAdChoice(ads[randomNumber])\n  }\n\n}, [])\n\n  if(adchoice === null || adchoice === undefined){\n    return(\n        <h5> </h5>\n    )\n  }\n  else{\n    console.log(\"adchoice\" + JSON.stringify(adchoice))\n    return(\n        <>\n          <div className=\"ad-box\">\n            Ad box\n            {adchoice.image}\n            {adchoice.url}\n          </div>\n        </>\n      );\n  }\n}\n\nexport default Advertisements\n","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentStore() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Navigate to servviio.com to create a site for your service </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentStore;\n","//import logo from './logo.svg';\n// import './App.css';\nimport Home from './store_pages/BookingRequest'\nimport {BrowserRouter as Router, Route, Switch, useLocation} from 'react-router-dom';\nimport Lost from './store_pages/NonExistentRoute';\n\nimport React, {useState, useEffect} from 'react';\nimport Gallery from './store_pages/Gallery';\nimport Services from './store_pages/Services';\nimport Navigation from './store_components/Navigation';\nimport BackgroundImage from './store_components/BackgroundImage';\n\nimport Calendar from './store_pages/Calendar';\nimport BookingRequest from './store_pages/BookingRequest';\nimport Messages from './store_pages/Messages';\nimport Conversations from './store_pages/Conversation';\nimport BookingDetails from './store_pages/BookingDetails';\nimport { Spinner } from 'react-bootstrap';\nimport Advertisements from './store_pages/components/Advertisements';\nimport NonExistentRoute from './store_pages/NonExistentRoute';\nimport NonExistentStore from './store_pages/NonExistentStore';\n\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\";\nimport {config} from './firebase';\n\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\nvar providerName;\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction App() {\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const location = useLocation();\n  const [errorPage, setErrorPage] = useState(false)\n  const [noNav, setNoNav] = useState(false)\n\n\n  useEffect(() => {\n    getSubdomain()\n\n  }, [])\n\n\n  function getSubdomain(){\n    const subdomainString = window.location.hostname\n    providerName = subdomainString.replace('.myservviio.com', '')\n    providerName = providerName.replace('.localhost', '')\n\n    if(content === null){\n      db.collection(\"serviceProviders\").doc(providerName)\n      .get().then((doc) => {\n              if (doc.exists) {\n                  // console.log(\"Store exists: \" + JSON.stringify(doc.data()))\n                  setContent({\"site_name\" : doc.id, \"service_content\":doc.data()})\n                  setIsPending(false)\n              } else {\n                  // console.log(\"No such provider!\");\n                  setErrorPage(true)\n              }\n      })\n    }\n    \n\n\n  }\n  if(errorPage === true){\n    return(\n      <NonExistentStore/>\n    )\n  }\n  else{\n\n    if((content === null) || (content === undefined) || (!content)){\n      return (\n        <Spinner animation=\"border\"/>\n      )\n    }\n    else{\n      return (\n        <>\n        \n         {(!noNav) && <Navigation serviceContent={content} />}\n  \n          {((location.pathname !== \"/\") && (!noNav)) && \n            <div>\n              <Advertisements/>\n            </div>\n          }\n  \n          <Switch>\n  \n            <Route exact path=\"/\">\n            { !content && <Spinner/> }\n              {content && <BackgroundImage serviceContent={content}/>}\n            </Route>\n  \n            <Route exact path=\"/services\">\n              <div>\n              { (!content) && <Spinner/> }\n                <Services serviceContent={content} />\n              </div>\n            </Route>\n  \n            <Route exact path=\"/booking-request\">\n            { (!content) && <Spinner/> }\n              <BookingRequest serviceContent={content} />\n            </Route>\n  \n            <Route exact path=\"/booking-request/details\">\n            { (!content) && <Spinner/> }\n              <BookingDetails />\n            </Route>\n  \n            <Route exact path=\"/gallery\">\n            { (!content) && <Spinner/> }\n              <Gallery serviceContent={content} />\n            </Route>\n  \n            <Route exact path=\"/messages\">\n            { (!content) && <Spinner/> }\n              {content && <Messages serviceContent={content} />}\n            </Route>\n\n            <Route exact path=\"/calendar\">\n            { (!content) && <Spinner/> }\n              {content && <Calendar serviceContent={content} />}\n            </Route>\n  \n            <Route exact path=\"/conversations\">\n            {/* { (!content) && <Spinner/> } */}\n              <Conversations />\n            </Route>\n  \n            <Route>\n              <NonExistentRoute/>\n            </Route>\n            \n          </Switch>\n        </>\n        \n      );\n    }\n  }\n\n  \n\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}