{"version":3,"sources":["store_pages/hooks/useGetEvents.js","firebase.js","store_pages/BookingRequest.js","store_pages/NonExistentRoute.js","store_pages/hooks/useFirestore.js","store_pages/hooks/useServiceList.js","store_pages/components/ImageGrid.js","store_pages/components/Modal.js","store_pages/Gallery.js","store_pages/Services.js","store_pages/hooks/useWindowSize.js","store_components/Navigation.js","store_components/BackgroundImage.js","store_pages/Messages.js","store_pages/Calendar.js","store_pages/hooks/useGetConvo.js","store_pages/components/ReturnHome.js","store_pages/Conversation.js","store_pages/hooks/useGetBookingMessages.js","store_pages/hooks/useGetBookingDetails.js","store_pages/BookingDetails.js","store_pages/NonExistentStore.js","store_pages/hooks/useGetHostName.js","App.js","reportWebVitals.js","index.js"],"names":["db","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","config","auth","apps","length","firestore","useGetEvents","providerName","useState","events","setEvents","useEffect","unsub","collection","doc","onSnapshot","querySnapshot","a","event_list","forEach","data","recurrence_type","push","id","event_start","event_end","event_start_datetimeISO","event_end_datetimeISO","event_notes","endTime","daysOfWeek","startTime","startRecur","endRecur","console","log","JSON","stringify","BookingRequest","serviceContent","success","setSuccess","nameRef","useRef","messageRef","emailRef","serviceRef","notesRef","provider_events","site_name","setOption","serviceObjectRequested","setServiceObjectRequested","offerred_services","service_content","services","initialView","Date","initialDate","date","setDate","bookingDate","setBookingDate","bookingDateSelected","setBookingDateSelected","service_requested","setService_Requested","calendarRef","e","preventDefault","nameSent","current","value","emailSent","messageSent","serviceChosen","serviceNotes","alert","currentTime","now","bookingref","bookingrefID","toISOString","service_length","parseFloat","duration","addMlSeconds","getTime","set","then","add","bookingRequestNotifRef","get","booking_requests_notif_array","booking_requests_notifications","update","FieldValue","arrayUnion","i","service_name","plugins","dayGridPlugin","interactionPlugin","listPlugin","timeGridPlugin","ref","customButtons","changeToMonthView","text","click","getApi","changeView","changeToWeekView","dateClick","dateStr","toDateString","headerToolbar","center","left","right","Card","Body","Form","onSubmit","Group","Label","Control","type","placeholder","required","as","onChange","target","map","item","index","disableClock","Button","Alert","variant","page_title","require","io","process","PORT","NonExistentRoute","projectFirestore","className","serverTimestamp","useFirestore","provider_name","docs","setDocs","documents","gallery_images","ImageGrid","provider_Name","setSelectedImg","Spinner","animation","layout","whileHover","opacity","s","onClick","url","src","alt","initial","animate","transition","delay","Modal","selectedImg","motion","div","classList","contains","img","y","Gallery","useServiceList","setServices","servicesFB","serviceCategoriesFB","Promise","resolve","reject","service_categories","result","j","serviceHolder","servicesArray","serviceSubCategories","serviceCategories","servicesB","main_category","toString","Services","Header","Object","keys","ListGroup","values","service","Item","Title","Subtitle","price","Text","description","useWindowSize","isSSR","window","width","innerWidth","height","innerHeight","windowSize","setWindowSize","changeWindowSize","addEventListener","removeEventListener","Navigation","screenW","setScreenW","page_theme","theme_name","Navbar","style","themes","colors","background","textDecoration","to","Toggle","Collapse","Nav","NavDropdown","title","href","Dropdown","Divider","BackgroundImage","imgUrl","page_background_image","text_colour","title_tagline_colour","hex_code","Messages","convoref","convorefID","msgNotifRef","msg_notif_array","msgs_notifications","useGetConvo","messages","setMessages","search","useLocation","searcher","URLSearchParams","has","conversationID","orderBy","messageList","snapshot","messageID","message_sent_by","message","timestamp","ReturnHome","history","useHistory","Conversations","match","location","msgStyling","messageRefFB","convoRef","inline","useGetBookingMessages","bookingRefID","useGetBookingDetails","bookingDetails","setBookingDetails","bookingID","BookingDetails","bookingdetails","bookingRef","client_name","service_notes","disabled","NonExistentStore","port","App","socket","connect","on","content","setContent","setIsPending","errorPage","setErrorPage","noNav","host_name","setHost_Name","hostName","disconnect","replace","exists","undefined","pathname","exact","path","Conversation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97489c64.chunk.js","sourcesContent":["//==================================================================\n//            CALENDAR EVETNS RETRIEVAL HOOK\n//------------------------------------------------------------------\n//   Hook searches for the events relating to this service provider\n// in firestore, using the providerName prop passed to it \n// to enable to help search firestore for the correct events\n//==================================================================\n\n\n\nimport { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\n\nconst useGetEvents = (providerName) => {\n  const [events, setEvents] = useState([]);\n\n  \n\n//   useEffect(() => {\n\n    useEffect(()=>{\n        \n        const unsub =  db.collection('serviceProviders').doc(providerName).collection('events')\n        .onSnapshot(async (querySnapshot)=>{\n            let event_list = []\n            querySnapshot.forEach((doc)=>{\n                if(doc.data().recurrence_type === \"none\"){\n                    event_list.push({\n                                \"id\": doc.id,\n                                \"title\": \"UNAVAILABLE\", \n                                \"start\": doc.data().event_start, \n                                \"end\": doc.data().event_end,\n                                \"startStr\": doc.data().event_start_datetimeISO, \n                                \"endStr\": doc.data().event_end_datetimeISO,\n                                \"notes\": doc.data().event_notes,\n                                \"recurrence_type\": \"none\"\n                            })\n                }else{\n                    if(doc.data().endTime === null){\n                        //omit end time from object\n                        event_list.push({\n                                \"id\": doc.id,\n                                \"title\": \"UNAVAILABLE\", \n                                \"notes\": doc.data().event_notes,\n                                \"daysOfWeek\": doc.data().daysOfWeek,\n                                \"startTime\": doc.data().startTime,\n                                \"endTime\": doc.data().endTime,\n                                \"startRecur\": doc.data().startRecur,\n                                \"recurrence_type\": \"simple_recurrence\"\n                            })\n                    }else{\n                        event_list.push({\n                                \"id\": doc.id,\n                                \"title\": \"UNAVAILABLE\", \n                                \"notes\": doc.data().event_notes,\n                                \"daysOfWeek\": doc.data().daysOfWeek,\n                                \"startRecur\": doc.data().startRecur,\n                                \"endRecur\": doc.data().endRecur,\n                                \"startTime\": doc.data().startTime,\n                                \"endTime\": doc.data().endTime,\n                                \"recurrence_type\": \"simple_recurrence\"\n                            })\n                    }\n                    \n                }\n                \n                \n            })\n            setEvents(event_list)\n            \n        })\n        // , ()=>{\n        //     console.log(\"not resetting events_list\")\n        //     setEvents(\"DN_EXIST\")\n        // })\n        return () => unsub();\n\n    }, [])\n    console.log(\"events: \" + JSON.stringify(events))\n\n    return events\n}\n\nexport default useGetEvents;","import firebase from \"firebase/compat/app\"\nimport \"firebase/compat/auth\"\n\nconst app = firebase.initializeApp({\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n})\n\nexport const config = {\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n}\n\nexport const auth = app.auth();\nexport default app","//=========================================================================\n//              CLIENT PAGE FOR INITIATING BOOKING REQUEST \n//=========================================================================\n\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Alert, Form, Button, Card } from \"react-bootstrap\";\n\nimport FullCalendar from '@fullcalendar/react'; // must go before plugins\nimport dayGridPlugin from '@fullcalendar/daygrid'; // a plugin!\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\nimport listPlugin from '@fullcalendar/list';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport useGetEvents from './hooks/useGetEvents';\nimport DateTimePicker from '../../node_modules/react-datetime-picker'\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction BookingRequest ({ serviceContent }) {\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  const serviceRef = useRef()\n  const notesRef = useRef()\n  const provider_events = useGetEvents(serviceContent.site_name)\n\n  const [option, setOption] = useState(null)\n\n  const [serviceObjectRequested,setServiceObjectRequested] = useState(null)\n\n  const offerred_services = serviceContent.service_content.services\n  const [initialView, setInitialView] = useState(\"timeGridWeek\")\n  const [initialDate, setInitialDate] = useState(new Date())\n  const [date, setDate] = useState(new Date());\n  const [bookingDate, setBookingDate] = useState(new Date())\n  const [bookingDateSelected, setBookingDateSelected] = useState(null)\n  const [service_requested, setService_Requested] = useState(\"\");\n\n\n  const calendarRef = useRef()\n  \n\n\n  useEffect(()=>{\n    console.log(\"services: \" + JSON.stringify(serviceContent.service_content.services))\n    var i = 0;\n    if(offerred_services){\n      console.log(\"running if in useEffect\")\n      for(i=0; i< offerred_services.length; i++){\n          if(offerred_services[i].service_name === service_requested){\n              setServiceObjectRequested(offerred_services[i])\n          }\n      }  \n  }\n    \n}, [service_requested])\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    const serviceChosen = serviceRef.current.value\n    const serviceNotes = notesRef.current.value\n    console.log(\"Name: \" + nameSent)\n    console.log(\"Email: \" + emailSent)\n    console.log(\"Message: \" + messageSent)\n    \n    try{\n      console.log(\"service_requested is: \" + service_requested)\n      console.log(\"offered services are: \" + JSON.stringify(serviceObjectRequested))\n      if(bookingDateSelected === null){\n        alert(\"Please select a date\")\n        return null\n      }else{\n        if(service_requested === null || service_requested === \"\"){\n          alert('Please select a service')\n          return null;\n        }\n        console.log(\"serviceRequested object: \" + JSON.stringify(serviceObjectRequested))\n        const currentTime = Date.now()\n        const bookingref = db.collection('serviceProviders').doc(serviceContent.site_name).collection('bookingrequests').doc()\n        const bookingrefID = bookingref.id\n\n        const startTime = new Date(bookingDate.toISOString())\n        let service_length = parseFloat(serviceObjectRequested.duration);\n        var addMlSeconds = 60 * 60 * 1000 * service_length;\n        const endTime = new Date(startTime.getTime() + addMlSeconds)\n\n        console.log(\"service length is: \" + service_length)\n        bookingref.set({\n          \"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \n          \"client_name\": nameSent, \"client_email\": emailSent, \n          \"service_requested\" : serviceChosen, \"service_notes\": serviceNotes, \n          \"timestamp\": currentTime, \"booking_status\": \"pending\", \n          \"provider_read_status\": \"unread\",\n          \"startTime\": bookingDate.toISOString(), \"endTime\": endTime.toISOString()\n        }).then(()=>{\n          db.collection('serviceProviders').doc(serviceContent.site_name).collection('bookingrequests').doc(bookingrefID).collection('messages')\n          .add({\"message\": messageSent, \"client_name\": nameSent, \n                \"client_email\": emailSent, \"message_sent_by\": \"client\", \n                \"timestamp\": currentTime, \"provider_read_status\": \"unread\"\n              }).then(()=>{\n                messageRef.current.value = ''\n                setSuccess(true)\n                return null\n              })\n          \n        })\n        // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n        \n        const bookingRequestNotifRef = db.collection('serviceProviders').doc(serviceContent.site_name)\n        bookingRequestNotifRef.get().then(async (doc)=>{\n          let booking_requests_notif_array = doc.data().booking_requests_notifications\n          let temp_booking_notif_array = booking_requests_notif_array.push(bookingrefID)\n          await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n        })\n      }\n            \n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false)\n    }\n}\n\nif(success === null){\n  return (\n    <>\n      <div>\n        <h1>Send a Booking Request</h1> \n      </div>\n\n      <div>\n      <FullCalendar\n            plugins={[ dayGridPlugin, interactionPlugin, listPlugin, timeGridPlugin ]}\n            initialView={initialView}\n            events={provider_events}\n            initialDate={initialDate}\n            ref={calendarRef}\n            customButtons={\n              {\n                changeToMonthView: {\n                  text: \"Month\",\n                  click: function () {\n                    calendarRef.current.getApi().changeView(\"dayGridMonth\", date.date);\n                  }\n                }, changeToWeekView: {\n                  text: \"Week\",\n                  click: function(){\n                    calendarRef.current.getApi().changeView(\"timeGridWeek\", date.date);\n                    }\n                  } \n              }\n          }\n            dateClick={(date)=>{\n              console.log(\"Full Calendar API date is: \" + date.date + \" type is: \" + typeof(date.date))\n              console.log(\"date.dateStr is: \" + date.dateStr + \" type is: \" + typeof(date.dateStr))\n              console.log(\"date.date is: \" + date.date.toDateString())     \n              setDate(date.date)\n              calendarRef.current.getApi().changeView(\"timeGridDay\", date.date);\n              //console.log(\"current view is: \" + JSON.stringify(calendarRef.current.getApi().view))\n           }}\n\n           \n            headerToolbar={{\n              center: \"changeToWeekView changeToMonthView\",\n              left: \"title\",\n              right: \"today prev,next\"\n              \n            }}\n          />\n      </div>\n      <div>\n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n\n          <Form.Label>Select Service</Form.Label>\n          <Form.Control\n           aria-label=\"Select Service\"\n           as=\"select\"\n            value={service_requested}\n            onChange={e => {\n              console.log(\"e.target.value\", e.target.value);\n              setOption(e)\n              setService_Requested(e.target.value)\n            }\n          }\n           >\n          <option ref={serviceRef} value=\"\"></option>\n          {offerred_services.map((item, index)=>{\n            return(\n              <option ref={serviceRef} value={item.service_name}>{item.service_name}</option>\n            )\n            \n          })}\n          </Form.Control>\n\n          \n          <Form.Group id=\"notes\">\n            <Form.Label>Extra Notes</Form.Label>\n            <Form.Control type=\"text\" ref={notesRef} placeholder=\"Type message\" required />\n          </Form.Group>\n\n          <br/>\n\n          <DateTimePicker\n            onChange={(value)=>{\n              setBookingDate(value)\n              setBookingDateSelected(true)}}\n            value={bookingDate}\n            disableClock={true}\n          />\n\n          <br/>\n          \n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Submit Booking Request</Button>\n\n          <Form.Label>Input service time using calendar:</Form.Label>\n        </Form>\n        </Card.Body>\n        </Card>\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n\n  )\n}\nelse{\n  return (\n    <div>\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert> :\n       <Alert variant=\"danger\">\n       Error occurred, please contact support\n       <br/>\n     </Alert>} \n    </div>\n    );\n}\n    \n  }\n   \n  export default BookingRequest;","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentRoute() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Use navigation bar above to navigate to existing pages </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentRoute;\n","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {auth, config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nlet projectFirestore;\nlet timestamp;\nlet admin_data;\n\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n    projectFirestore = firebase.firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n    projectFirestore = firebase.app().firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  }\n\nconst useFirestore = (provider_name) => {\n  const [docs, setDocs] = useState([]);\n  \n\n  useEffect(() => {\n    \n    const unsub = projectFirestore.collection(\"serviceProviders\").doc(provider_name)\n    .onSnapshot(doc => {\n        let documents;\n        documents = doc.data().gallery_images;\n        setDocs(documents);\n    });\n    return () => unsub();\n    \n  }, [provider_name]);\n\n  \n\n  return { docs };\n}\n\nexport default useFirestore;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\nconst useServiceList = (providerName) => {\n//   const [services, setServices] = useState([]);\n//   const [categories, setCategories] = useState([]);\n    console.log(\"admin_data in useServicList: \" + providerName)\n    const [services, setServices] = useState(null)\n    console.log(\"serviceList render ran again...\")\n  \n\n//   useEffect(() => {\n\n    useEffect(()=>{\n        const unsub =  db.collection(\"serviceProviders\").doc(providerName)\n        .onSnapshot((doc) => {\n            let servicesFB;\n            let serviceCategoriesFB\n            return new Promise((resolve, reject)=>{\n                servicesFB = doc.data().services  \n                serviceCategoriesFB = doc.data().service_categories       \n                console.log(\"useEffect serviceList ran again...\")\n                resolve({\"services\": servicesFB, \"serviceCategories\": serviceCategoriesFB})\n            }).then(async (result)=>{\n                return new Promise((resolve, reject)=>{\n                    let servicesArray = [];\n                    let serviceSubCategories = result.services\n                    let serviceCategories = result.serviceCategories\n\n                    \n                    var i;\n                    var j;\n                    var serviceHolder;\n                    if(serviceSubCategories && serviceCategories){\n                        if(serviceCategories.length === 0){\n                            resolve(\"NO_SERVICES\")\n                        }else{\n\n                            console.log(\"services and categories set\")\n                            for(i=0; i < serviceCategories.length; i++){\n                                //set key in services object i.e. {main categoryM: \"\"}\n                                var servicesB = {}\n                                serviceHolder = []\n                                for(j=0; j < serviceSubCategories.length; j++){\n                                    console.log(\"service category: \" + serviceCategories[i] + \" service name: \" + JSON.stringify(serviceSubCategories[j]))\n                                    if (serviceSubCategories[j].main_category === serviceCategories[i].toString()){\n                                        serviceHolder.push(serviceSubCategories[j])\n                                    }\n                                    if(j === serviceSubCategories.length -1){\n                                        //i.e. {maincategory1 : [subcategory1, subcategory2...subcategoryN]..., maincategoryM: []}\n                                        servicesB[ serviceCategories[i] ] = serviceHolder\n                                        servicesArray.push(servicesB)\n                                    }\n                                }\n                                if(i === serviceCategories.length - 1){\n                                    console.log(\"Services inside loop: \" + JSON.stringify(servicesB))\n                                    console.log(\"ServiceReady has been set to true\")\n                                    // setServices(servicesB)\n                                    // setServicesReady(true)\n                                    resolve(servicesArray)\n                                }\n                                \n                            }\n                        }\n                    }\n                        console.log(\"numbers is about to change/cause rerender...\")\n                        // setNumber((value + 10));\n                })\n            }).then((result)=>{\n                setServices(result)\n            })\n                \n\n        });\n    return () => unsub();\n}, [])\n\n\n    // const unsub =  db.collection(\"serviceProviders\").where(\"email\", \"==\", provider_email)\n    // .onSnapshot(doc => {\n    //     let servicesList;\n    //     let categoryList;\n\n    //     servicesList = doc.data().services;\n    //     categoryList = doc.data().services;\n\n    //     setServices(servicesList);              \n    //     setCategories(categoryList);\n    //     console.log(\"serviceList subscription ran...\")\n    // });\n    // return () => unsub();\n        \n    \n\n    \n    // this is a cleanup function that react will run when\n    // a component using the hook unmounts\n//   }, []);\n\n  \n\n  return services\n}\n\nexport default useServiceList;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\nimport { Spinner } from 'react-bootstrap';\n\nconst ImageGrid = ({ provider_Name, setSelectedImg }) => {\n\n\n  const { docs } = useFirestore(provider_Name);\n\n  return (\n    <div className=\"img-grid\">\n      {!docs && <Spinner animation=\"border\"/>}\n      {docs && docs.map((doc, index) => (\n        <div className=\"img-wrap\" key={index} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {config} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\n\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport { Spinner } from \"react-bootstrap\";\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\nexport default function Gallery({serviceContent}) {\n \n    const [selectedImg, setSelectedImg] = useState(null);\n    // const [providerName, setProviderName] = useState(null)\n    const providerName = serviceContent.site_name\n\n\n\n    // useEffect(()=>{\n        \n\n    // }, [])\n\n    if(providerName === null){\n        return(\n          <Spinner animation=\"border\"/>\n        )\n    }else{\n        return (\n          <>\n          <h1> Gallery </h1>\n          {(serviceContent.service_content.gallery_images.length === 0) ? \n            <h2>No Images Added Yet</h2>\n            :\n            <div className=\"Gallery\">\n              \n\n              \n\n              {providerName && <ImageGrid provider_Name={providerName} setSelectedImg={setSelectedImg} />}\n              { selectedImg && (\n                <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n              )}\n            </div>\n          }\n          </>\n          );\n\n    }\n\n\n  \n\n}","import React, { useEffect, useState, useRef} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useServiceList from './hooks/useServiceList'\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport {config} from '../firebase';\nimport { Card, Button, Alert, Spinner, ListGroup, Modal, Form } from \"react-bootstrap\";\n\n\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\nfunction Services({ serviceContent }){\n    console.log(\"Calendar rerendered\")\n    console.log(\"admin_data in Calendar: \" + serviceContent.site_name)\n    const services = useServiceList(serviceContent.site_name)\n\n    \n    if(serviceContent.service_content.service_categories.length !== 0){\n        if(services === null){\n            return(\n                <>\n                    <Spinner animation=\"border\" />\n                </>\n                \n            )\n        }\n        else{\n            return(\n        \n                <>\n                    <h1>Services</h1>\n                    <div>\n                        {/* {console.log(\"\" + JSON.stringify(services))} */}\n                        {services.map((item, index)=>{\n                            return(\n                                <>\n                                <Card>\n                                    {/* <Card.Img> </Card.Img> */}\n                                    <Card.Header>\n                                        {Object.keys(item)[0]} \n                                        <br/>\n                                        \n                                    </Card.Header>\n                                    \n                                    <ListGroup variant=\"flush\">\n                                        {Object.values(item)[0].map((service, i) =>{\n                                            return(\n                                                <>\n                                                <Card>\n                                                    {/* <Button onClick={deleteService(item.service_name)}> Delete Service </Button> */}\n                                                <ListGroup.Item>\n                                                    \n                                                    <Card.Title> \n                                                        {service.service_name}\n                                                        <br/>\n                                                    </Card.Title>\n                                    \n                                                        <br/>\n                                                    <Card.Subtitle> \n                                                        Price: {service.price}\n                                                    </Card.Subtitle>\n                                                    <br/>\n                                                    <Card.Subtitle>\n                                                    Duration: {service.duration}\n                                                    </Card.Subtitle>\n                                                \n                                                    <br/>\n                                                    <Card.Text>\n                                                        {service.description}\n                                                    </Card.Text>\n                                                    </ListGroup.Item>\n                                                \n                                                </Card>\n                                                <br/>\n                                                </>\n                                            )\n                                        })}\n                                    </ListGroup>\n                                </Card>\n                                <br/>\n                                <br/>\n                                </>\n                            )\n                            \n                        })}\n                        \n                    </div>\n                </>\n                );\n        }\n    \n    }\n    else{\n        return(\n            <h2>No Services Added Yet</h2>\n        )\n    }\n\n    \n\n        \n    }\n\nexport default Services\n","import React, {useState, useEffect} from \"react\";\n\nexport default function useWindowSize() {\n    const isSSR = typeof window !== \"undefined\";\n    const [windowSize, setWindowSize] = useState({\n        width: isSSR ? 1200 : window.innerWidth,\n        height: isSSR ? 800 : window.innerHeight,\n    });\n\n    function changeWindowSize() {\n        setWindowSize({ width: window.innerWidth, height: window.innerHeight });\n    }\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", changeWindowSize);\n        changeWindowSize()\n        return () => {\n            window.removeEventListener(\"resize\", changeWindowSize);\n        };\n    }, []);\n\n    return windowSize;\n\n}\n","import React, {useEffect, useState} from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\nimport * as themes from '../themes.json';\nimport useWindowSize from '../store_pages/hooks/useWindowSize';\nimport {Dropdown, DropdownButton, Navbar, Nav, NavDropdown} from 'react-bootstrap';\nimport { width } from '@mui/system';\n\nfunction Navigation({ serviceContent }){\n  const [screenW, setScreenW] = useState(375)\n  const {width, height} = useWindowSize()\n  const page_theme = serviceContent.service_content.page_theme.theme_name\n\n  useEffect(()=>{\n    setScreenW(width)\n  }, [width, height])\n\n  if(screenW < 1024){\n    return(\n      <>\n        <Navbar className='topnav' style={{\"background-color\": themes.themes[page_theme].colors.background, \"height\": \"15vh\"}}>\n          <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/\">\n            <div>\n                <h1>{serviceContent.service_content.page_title}</h1>\n            </div>\n          </Link>\n          <Navbar.Toggle aria-controls=\"navbar-dark-example\" />\n          <Navbar.Collapse style={{\"z-index\": \"20\"}} id=\"navbar-dark-example\">\n            <Nav className='topnav-right'>\n              <NavDropdown\n              id=\"nav-dropdown-dark-example\"\n              title=\"Menu\"\n              >\n                {/* <DropdownButton id=\"menu\" title=\"Menu\"> */}\n                <NavDropdown.Item style={{\"color\": \"black\"}} href=\"/services\">Services</NavDropdown.Item>\n                <Dropdown.Divider/>\n                <NavDropdown.Item style={{\"color\": \"black\"}} href=\"/booking-request\">Send Booking Request</NavDropdown.Item>\n                <Dropdown.Divider/>\n                <NavDropdown.Item style={{\"color\": \"black\"}} href=\"/messages\">Send Message</NavDropdown.Item>\n                <Dropdown.Divider/>\n                <NavDropdown.Item style={{\"color\": \"black\"}} href=\"/gallery\">Gallery</NavDropdown.Item>\n                {/* </DropdownButton> */}\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n      </>\n    );\n  }\n  else{\n    return(\n      <>\n        <div className='topnav' style={{\"background-color\": themes.themes[page_theme].colors.background, \"height\": \"15vh\"}}>\n          <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/\">\n          <div>\n              <h1>{serviceContent.service_content.page_title}</h1>\n          </div>\n          </Link>\n          <div className='topnav-right'>\n          {/* <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\", \"listStyle\": \"none\"}}> */}\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/services\">\n                Service Info & Pricing\n              </Link>\n            {/* </li> */}\n            {/* <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\", \"listStyle\": \"none\"}}> */}\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/booking-request\">\n                  Availability & Booking\n              </Link>\n            {/* </li> */}\n            {/* <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\", \"listStyle\": \"none\"}}> */}\n            {/* </li> */}\n            {/* <li style={{\"padding-left\": \"15px\", \"padding-right\": \"15px\", \"listStyle\": \"none\"}}> */}\n              <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/messages\">\n                  Send Message\n              </Link>\n            {/* </li> */}\n            <Link style={{ textDecoration: 'none', \"color\": themes.themes[page_theme].colors.text, \"font-weight\": \"bold\" }} to=\"/gallery\">\n                  Gallery              \n            </Link>\n          </div>\n        </div>\n      </>\n    );\n  }\n    \n}\n\nexport default Navigation\n","\n\nfunction BackgroundImage({ serviceContent }){\n    var backgroundImage;\n    var frontPageTitle;\n    var frontPageTagline;\n\n    const imgUrl = serviceContent.service_content.page_background_image.url\n    const text_colour = serviceContent.service_content.title_tagline_colour.hex_code\n\n\n    console.log(\"background image URL:\" + imgUrl)\n\n    // if(serviceContent.service_content.page_styling === \"choice_1\"){\n    //     backgroundImage = \"background-image-1\";\n    //     frontPageTitle = \"frontPageTitle-1\";\n    //     frontPageTagline = \"frontPageTagline-1\";\n    // }\n    // else if(serviceContent.service_content.page_styling === \"choice_2\"){\n    //     backgroundImage = \"background-image-2\";\n    //     frontPageTitle = \"frontPageTitle-2\";\n    //     frontPageTagline = \"frontPageTagline-2\";\n    // }\n    // else{\n    //     backgroundImage = \"background-image-3\";\n    //     frontPageTitle = \"frontPageTitle-3\";\n    //     frontPageTagline = \"frontPageTagline-3\";\n    // }\n    \n\n    return(\n        \n        <div style={{\"textAlign\": \"center\"}}>\n        <div style={{\"background-image\": `url(${imgUrl})`,\n        \"background-repeat\": \"no-repeat\", \"background-attachment\": \"fixed\", \"background-size\": \"100% 100%\",   \n        \"min-height\": \"85%\", \"max-height\": \"85%\", \"opacity\": \"0.4\", \"min-width\": \"1024px\", \"width\": \"100%\",\n        \"height\": \"auto\", \"position\": \"fixed\",\n        \"bottom\": \"0\",\"left\": \"0\"}}>\n        </div>\n        <h1 style={{\"font-weight\": \"bold\", \"color\": text_colour, \"position\": \"absolute\", \"top\": \"50%\", \"left\": \"20%\", \"z-index\": \"10\"}}> \n        {serviceContent.service_content.page_title}\n        </h1>\n            <br></br>\n        <h4 style={{\"font-weight\": \"bold\", \"color\": text_colour, \"position\": \"absolute\", \"top\": \"58%\", \"left\": \"20%\", \"z-index\": \"10\"}}> {serviceContent.service_content.description}</h4>\n\n        </div>\n            )\n}\n\nexport default BackgroundImage","//=========================================================================\n//            CLIENT PAGE FOR INITIATING MESSAGE TO PROVIDER   \n//=========================================================================\n\n\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card, Alert } from \"react-bootstrap\";\n// import Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction Messages ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    // console.log(\"Name: \" + nameSent)\n    // console.log(\"Email: \" + emailSent)\n    // console.log(\"Message: \" + messageSent)\n    try{\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.site_name).collection('conversations').doc()\n      const convorefID = convoref.id\n      // console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      await db.collection('serviceProviders').doc(serviceContent.site_name).collection('conversations').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n      \n      // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n      const msgNotifRef = db.collection('serviceProviders').doc(serviceContent.site_name)\n      msgNotifRef.get().then(async (doc)=>{\n        let msg_notif_array = doc.data().msgs_notifications\n        let temp_msg_notif_array = msg_notif_array.push(convorefID)\n        await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n      })\n\n      setSuccess(true)\n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false);\n    }\n}\n\n  if(success === null){\n    return (\n      <>\n      <div>\n        <h1>Send a Message</h1> \n      </div>\n      <div>\n      {!success && \n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n          \n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Send Message</Button>\n        </Form>\n        </Card.Body>\n        </Card>}\n\n\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      \n\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n    );\n\n  }     \n  else{\n    return(\n      <div>\n        {success ? <Alert variant=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert>   :\n        <Alert variant=\"danger\">\n        Error occurred, please contact support\n        <br/>\n      </Alert>\n        }\n\n      </div>\n      \n    )\n  }\n\n}\n   \n  export default Messages;","import React, {useState, useEffect} from 'react';\nimport { Spinner } from 'react-bootstrap';\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\nconst port = process.env.PORT || 5000;\n\nconst Calendar = ({ serviceContent }) => {\n\n  // const [content, setContent] = useState(null);\n  // const [isPending, setIsPending] = useState(true);\n\n\n  \n\n    return (\n      <div className=\"Calendar\">\n          <h1> {serviceContent.site_name}'s calendar events - React page </h1>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n      </div>\n    );\n  }\n   \n  export default Calendar;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\n\nconst useGetConvo = () => {\n  const [messages, setMessages] = useState([]);\n//   const [unreadMessages, setUnreadMessages] = useState([]);\n  const search = useLocation().search;\n\n    // console.log(\"useGetBookingMessages location and location query...\" + JSON.stringify(location) + '' + JSON.stringify(location.query))\n    \n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('chat')) || !(searcher.has('provider'))){\n            setMessages(\"DN_EXIST\")\n            // setUnreadMessages(\"DN_EXIST\")\n        }else{\n            // var messageList = [];\n            // var unreadMessageList = []\n            const providerName = new URLSearchParams(search).get('provider')\n            const conversationID = new URLSearchParams(search).get('chat')\n            const unsub =  db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages')\n            .orderBy('timestamp', 'asc')\n            .onSnapshot(async (querySnapshot)=>{\n                let messageList = [];\n                // let unreadMessageList = []\n                console.log(\"convo hook rerunning\")\n                querySnapshot.forEach((snapshot) =>{\n                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                    const messageID = snapshot.id\n                    if(snapshot.data().message_sent_by === \"client\"){\n                        //place unread colour or notification on message\n                        // console.log(\"adding client msg\")\n                        messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }else{\n                    //simply place message\n                    //   console.log(\"adding provider msg\")\n                    messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }\n                    \n                })\n                setMessages(messageList)\n                // setUnreadMessages(unreadMessageList)\n                \n                \n            }, ()=>{\n                // console.log(\"not resetting messageList\")\n                // setUnreadMessages(\"DN_EXIST\")\n                setMessages(\"DN_EXIST\")\n            })\n            return () => unsub();\n            \n        }\n    }, [])\n    console.log(\"messages: \" + JSON.stringify(messages))\n\n    return messages\n}\n\nexport default useGetConvo;","//==================================================================\n//            BACK BUTTON\n//------------------------------------------------------------------\n//   Redirects user to previous page in history\n//==================================================================\n\nimport React from 'react'\nimport { useHistory } from \"react-router-dom\";\n\nfunction ReturnHome(){\n    let history = useHistory();\n    return (\n        <div className=\"back-button\">\n\n          <button onClick={() => history.push('/')}>Return Home</button>\n        </div>\n    );\n};\n\n\nexport default ReturnHome\n","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO MESSAGE \n//=========================================================================\n\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\nimport useGetConvo from './hooks/useGetConvo';\nimport useWindowSize from '../store_pages/hooks/useWindowSize';\nimport ReturnHome from './components/ReturnHome';\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction Conversations({match, location}) {\n    const search = useLocation().search;\n    const {width, height} = useWindowSize()\n    const [screenW, setScreenW] = useState(0.7*width)\n\n    const msgStyling = {\"client\": {\"padding\": \"5px\", \"border-radius\": \"5px\", \"background-color\": \"#0574DD\", \"color\": \"white\", \"maxWidth\": `${0.4*width}px`, \"margin-right\":\"5px\", \"margin-left\": \"auto\"},\n    \"provider\": {\"padding\": \"5px\", \"border-radius\": \"5px\", \"background-color\": \"white\", \"color\": \"black\", \"maxWidth\": `${0.4*width}px`, \"margin-left\":\"5px\", \"margin-right\": \"auto\"} }\n\n    const provider_Name = new URLSearchParams(search).get('provider')\n\n    const messages = useGetConvo()\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const messageRef = useRef()\n    var messageList = [];\n\n    useEffect(()=>{\n      if(width < 672){\n        setScreenW(0.8*width)\n      }else if(width < 990){\n        setScreenW(0.8*width)\n      }else{\n        setScreenW(0.5*width)\n      }\n    }, [width, height])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRefFB = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const convoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRefFB.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          convoRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n          .then(()=>{\n            messageRef.current.value = ''\n          })\n       \n          // get msgs_notifications array, push new notification and convo docID the notification came from not the messages docID\n        const msgNotifRef = db.collection('serviceProviders').doc(providerName)\n        msgNotifRef.get().then(async (doc)=>{\n          let msg_notif_array = doc.data().msgs_notifications\n          let temp_msg_notif_array = msg_notif_array.push(conversationID)\n          await msgNotifRef.update({\"msgs_notifications\" : firebase.firestore.FieldValue.arrayUnion(...msg_notif_array)}) \n        })\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n\n\n\n      if(messages === \"DN_EXIST\"){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(  \n          <div style={{\"maxHeight\": height}}>   \n          <ReturnHome/>\n            <div style={{\"display\": \"grid\", \"place-items\": \"center\", \"align-content\": \"center\"}}>\n                <h2 style={{\"position\": \"absolute\", \"top\": \"0\"}}> Your Messages</h2>\n\n                {messages ?\n                <>\n                  <Card style={{\"width\": `${screenW}px`, \"height\": `${0.7*height}px`, \"position\": \"absolute\", \"maxHeight\": `${0.7*height}px`, \"overflowY\": \"auto\", \"top\":\"10%\" }}>\n\n                        {messages.map((item, index)=>{\n                        return(\n                          <>\n                          <br/>\n                          <div style={msgStyling[item.message_sent_by]}>\n                            <li key={index} style={{\"listStyle\": \"none\"}}>\n                            {item.message_sent_by === 'client' ? <h5>you:</h5> : <h5>{provider_Name}:</h5> }\n                                <h4>\n                                    {item.message}\n                                </h4>\n                            </li>\n                            </div>\n                          </>\n                        )\n                        })}\n                    </Card>\n                    <div style={{\"position\": \"absolute\", \"bottom\": \"0px\", \"display\": \"table\"}}>\n                        \n                      <Form inline onSubmit={onFormSubmit}>\n                        <div style={{\"display\": \"table-row\"}}>\n                          \n                          <div style={{\"display\": \"table-cell\"}}>\n                            <Form.Group id=\"message\">\n                              <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                            </Form.Group>\n                          </div>\n\n                          <div style={{\"display\": \"table-cell\"}}>\n                            <Button type=\"submit\">Send Message</Button>\n                          </div>\n\n                        </div>\n                      \n                      </Form>\n\n                    </div>\n                </>\n                :\n                <Spinner animation='border'/>\n                }\n                 \n            </div>\n            </div>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default Conversations","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\n\nconst useGetBookingMessages = () => {\n  const [messages, setMessages] = useState([]);\n//   const [unreadMessages, setUnreadMessages] = useState([]);\n  const search = useLocation().search;\n\n    // console.log(\"useGetBookingMessages location and location query...\" + JSON.stringify(location) + '' + JSON.stringify(location.query))\n    \n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n            setMessages(\"DN_EXIST\")\n            // setUnreadMessages(\"DN_EXIST\")\n        }else{\n            // var messageList = [];\n            // var unreadMessageList = []\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingRefID = new URLSearchParams(search).get('bookingref')\n            const unsub = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages')\n            .orderBy('timestamp', 'asc')\n            .onSnapshot(async (querySnapshot)=>{\n                let messageList = [];\n                // let unreadMessageList = []\n                console.log(\"convo hook rerunning\")\n                querySnapshot.forEach((snapshot) =>{\n                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                    const messageID = snapshot.id\n                    if(snapshot.data().message_sent_by === \"client\"){\n                        //place unread colour or notification on message\n                        // console.log(\"adding client msg\")\n                        messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }else{\n                    //simply place message\n                    //   console.log(\"adding provider msg\")\n                    messageList.push({\n                        \"message\": snapshot.data().message,\n                        \"timestamp\": snapshot.data().timestamp,\n                        \"message_sent_by\": snapshot.data().message_sent_by,\n                        \"messageID\": messageID})\n                    }\n                    \n                })\n                setMessages(messageList)\n                // setUnreadMessages(unreadMessageList)\n                \n                \n            }, ()=>{\n                // console.log(\"not resetting messageList\")\n                // setUnreadMessages(\"DN_EXIST\")\n                setMessages(\"DN_EXIST\")\n            })\n            return () => unsub();\n            \n        }\n    }, [])\n    console.log(\"messages: \" + JSON.stringify(messages))\n\n    return messages\n}\n\nexport default useGetBookingMessages;","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\nimport {useLocation} from 'react-router-dom';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\nconst useGetBookingDetails = () => {\n    const [bookingDetails, setBookingDetails] = useState(null);\n    const search = useLocation().search;\n  \n\n    useEffect(()=>{\n        const searcher = new URLSearchParams(search)\n        if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n            setBookingDetails(\"DN_EXIST\")\n        }else{\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingID = new URLSearchParams(search).get('bookingref')\n                \n            const unsub =  db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingID)\n            .onSnapshot((doc) => {\n                setBookingDetails(doc.data())\n            }, ()=>{\n                setBookingDetails(\"DN_EXIST\")\n            });\n            \n            return () => unsub();\n            \n            \n        }\n}, [])\n\n  \n\n  return bookingDetails\n}\n\nexport default useGetBookingDetails;","//=========================================================================\n//    CLIENT PAGE FOR RESPONDING TO PROVIDER'S RESPONSE TO BOOKING REQUEST \n//=========================================================================\n\nimport React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\nimport useGetBookingMessages from './hooks/useGetBookingMessages';\nimport useGetBookingDetails from './hooks/useGetBookingDetails';\nimport useWindowSize from '../store_pages/hooks/useWindowSize';\nimport ReturnHome from './components/ReturnHome';\n\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction BookingDetails({match, location}) {\n    const {width, height} = useWindowSize()\n    const [screenW, setScreenW] = useState(0.7*width)\n\n    const msgStyling = {\"client\": {\"padding\": \"5px\", \"border-radius\": \"5px\", \"background-color\": \"#0574DD\", \"color\": \"white\", \"maxWidth\": `${0.4*width}px`, \"margin-right\":\"5px\", \"margin-left\": \"auto\"},\n    \"provider\": {\"padding\": \"5px\", \"border-radius\": \"5px\", \"background-color\": \"white\", \"color\": \"black\", \"maxWidth\": `${0.4*width}px`, \"margin-left\":\"5px\", \"margin-right\": \"auto\"} }\n\n    const search = useLocation().search;\n    \n    const messages = useGetBookingMessages()\n    const bookingdetails = useGetBookingDetails()\n    const messageRef = useRef()\n    const provider_Name = new URLSearchParams(search).get('provider')\n\n    useEffect(()=>{\n        if(width < 672){\n          setScreenW(0.8*width)\n        }else if(width < 990){\n          setScreenW(0.8*width)\n        }else{\n          setScreenW(0.5*width)\n        }\n      }, [width, height])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingRefID = new URLSearchParams(search).get('bookingref')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n            //create new message doc for this new message provider has just typed\n            const messageRefFB = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages').doc()\n            // update the 'most recent message sent field in the conversations collection doc'\n            const bookingRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID)\n            //   console.log(\"convorefID is: \" + convorefID)\n            await messageRefFB.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n            bookingRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime, \"provider_read_status\": \"unread\"})\n            .then(()=>{\n                messageRef.current.value = ''\n            })\n            // get booking_request_notifications array, push new notification and bookingrequest docID the notification came from not the messages docID\n        \n            const bookingRequestNotifRef = db.collection('serviceProviders').doc(providerName)\n            bookingRequestNotifRef.get().then(async (doc)=>{\n            let booking_requests_notif_array = doc.data().booking_requests_notifications\n            let temp_msg_notif_array = booking_requests_notif_array.push(bookingRefID)\n            await bookingRequestNotifRef.update({\"booking_requests_notifications\" : firebase.firestore.FieldValue.arrayUnion(...booking_requests_notif_array)}) \n            })\n\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n\n      if((bookingdetails === \"DN_EXIST\" || messages === \"DN_EXIST\")){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <div style={{\"maxHeight\": height}}>\n            <div>\n                <ReturnHome/>\n            </div>\n            <h2 style={{\"position\": \"absolute\", \"top\": \"0%\"}}> Your Booking Request</h2>\n            <br/>\n                {\n                    (bookingdetails && messages) ?\n                        <div style={{\"display\": \"grid\", \"place-items\": \"center\", \"align-content\": \"center\"}}>\n                            <Card style={{\"width\": `${screenW}px`, \"position\": \"absolute\", \"maxHeight\": `${0.25*height}px`, \"overflowY\": \"auto\", \"top\":\"10%\"}}>\n                                <Card.Body>\n                                    <Card.Title>\n                                        {bookingdetails.client_name}\n                                    </Card.Title>\n                                    <Card.Text>\n                                        Service: {bookingdetails.service_requested}\n                                        Notes: {bookingdetails.service_notes}\n                                        <Form.Label>Event Start</Form.Label>\n                                        <Card.Text\n                                            type=\"text\"\n                                            disabled={true}\n                                            // ref={eventTodayNotesRef}\n                                            placeholder={`${new Date(bookingdetails.startTime).toString()}`}\n                                        />\n                                        <br/>\n\n                                        <Form.Label>Event End</Form.Label>\n                                        <Card.Text \n                                        type=\"text\"\n                                        disabled={true}\n                                        // ref={eventTodayNotesRef}\n                                        placeholder={`${new Date(bookingdetails.endTime).toString()}`}\n                                        />\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            <br/>\n        \n                           <Card style={{\"width\": `${screenW}px`, \"height\": `${0.4*height}px`, \"display\": \"block\", \"maxHeight\": `${0.4*height}px`, \"overflowY\": \"auto\", \"top\":\"50%\" }}>\n                                {messages.map((item, index)=>{\n                                return(\n                                    <>\n                                    <div style={msgStyling[item.message_sent_by]} >\n                                    <li key={index} style={{\"list-style\": \"none\"}}>\n                                    {item.message_sent_by === 'client' ? <h5>you:</h5> : <h5>{provider_Name}:</h5> }\n                                        <h4>\n                                            {item.message}\n                                        </h4>\n                                    </li>\n                                    </div>\n                                    <br/>\n                                    <br/>\n                                    </>\n                                )\n                                })}\n                            </Card>\n\n                            <div style={{\"position\": \"absolute\", \"bottom\": \"0px\", \"display\": \"table\"}}>\n                                <Form inline onSubmit={onFormSubmit}>\n                                    <div style={{\"display\": \"table-row\"}}>\n                                        \n                                        <div style={{\"display\": \"table-cell\"}}>\n                                            <Form.Group id=\"message\">\n                                                <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                                            </Form.Group>\n                                        </div>\n\n                                        <div style={{\"display\": \"table-cell\"}}>\n                                            <Button type=\"submit\">Send Message</Button>\n                                        </div>\n                                    \n                                    </div>\n                                    \n                                </Form>\n                            </div>\n\n                        </div>\n                    : <Spinner animation='border'/>\n\n                }\n                 \n            </div>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default BookingDetails","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction NonExistentStore() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Navigate to servviio.com to create a site for your service </h2>\n\n    </div>\n  );\n}\n\nexport default NonExistentStore;\n","//==================================================================\n//            HOSTNAME RETRIEVAL HOOK\n//------------------------------------------------------------------\n//   Hook uses the hostname in the window to search for the provider's \n// store content to use as props throughout the rest of the application\n//==================================================================\n\n\n\nimport { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n\n\n  }\n\n\n\nconst useGetHostName = () => {\n  const hostName  = window.location.hostname\n  const [hostToSend, setHostToSend] = useState(null)\n\n  \n\n  function changeHostName() {\n    setHostToSend(hostName);\n}\n    useEffect(()=>{\n        changeHostName()\n\n    }, [hostName])\n    console.log(\"hostname is: \" + hostName)\n\n    return hostToSend\n}\n\nexport default useGetHostName;","//import logo from './logo.svg';\n// import './App.css';\nimport Home from './store_pages/BookingRequest'\nimport {BrowserRouter as Router, Route, Switch, useLocation} from 'react-router-dom';\nimport Lost from './store_pages/NonExistentRoute';\n\nimport React, {useState, useEffect} from 'react';\nimport Gallery from './store_pages/Gallery';\nimport Services from './store_pages/Services';\nimport Navigation from './store_components/Navigation';\nimport BackgroundImage from './store_components/BackgroundImage';\n\nimport Calendar from './store_pages/Calendar';\nimport BookingRequest from './store_pages/BookingRequest';\nimport Messages from './store_pages/Messages';\nimport Conversations from './store_pages/Conversation';\nimport BookingDetails from './store_pages/BookingDetails';\nimport { Spinner } from 'react-bootstrap';\nimport Advertisements from './store_pages/components/Advertisements';\nimport NonExistentRoute from './store_pages/NonExistentRoute';\nimport NonExistentStore from './store_pages/NonExistentStore';\n\n\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\";\nimport {config} from './firebase';\nimport useGetHostName from './store_pages/hooks/useGetHostName';\n\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\nvar providerName;\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction App() {\n\n  const socket = io();\n  socket.connect(`http://localhost:${port}`);\n\n  socket.on(\"connect\", () => {\n    console.log(\"made socket connection\"); // true\n  });\n  \n\n\n\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const location = useLocation();\n  const [errorPage, setErrorPage] = useState(false)\n  const [noNav, setNoNav] = useState(false)\n  // const host_name = useGetHostName()\n  const [host_name, setHost_Name] = useState(null)\n\n\n\n  useEffect(() => {\n    socket.on(\"host_name\", (hostName) => {\n      console.log(\"host name is: \" + JSON.stringify(hostName)); // true\n      setHost_Name(hostName.host_name)\n      socket.disconnect()\n    });\n\n    if(host_name){\n      getSubdomain()\n    }\n    \n\n  }, [host_name])\n\n\n  function getSubdomain(){\n    // const subdomainString = window.location.hostname\n    const subdomainString = host_name\n    providerName = subdomainString.replace('.myservviio.com', '')\n    providerName = providerName.replace('.localhost', '')\n\n    if(content === null){\n      db.collection(\"serviceProviders\").doc(providerName)\n      .get().then((doc) => {\n              if (doc.exists) {\n                  // console.log(\"Store exists: \" + JSON.stringify(doc.data()))\n                  setContent({\"site_name\" : doc.id, \"service_content\":doc.data()})\n                  setIsPending(false)\n              } else {\n                  // console.log(\"No such provider!\");\n                  setErrorPage(true)\n              }\n      })\n    }\n    \n\n\n  }\n  if(errorPage === true){\n    return(\n      <NonExistentStore/>\n    )\n  }\n  else{\n\n    if((content === null) || (content === undefined) || (!content)){\n      return (\n        <Spinner animation=\"border\"/>\n      )\n    }\n    else{\n      return (\n        <>\n        \n         {(!noNav && location.pathname !== '/booking-request/details' && location.pathname !== '/conversations') && <Navigation serviceContent={content} />}\n  \n          {/* {((location.pathname !== \"/\") && (!noNav)) && \n            <div>\n              <Advertisements/>\n            </div>\n          } */}\n  \n          <Switch>\n  \n            <Route exact path=\"/\">\n            { !content && <Spinner/> }\n              {content && <BackgroundImage serviceContent={content}/>}\n            </Route>\n  \n            <Route exact path=\"/services\">\n              <div>\n              { (!content) && <Spinner/> }\n                <Services serviceContent={content} />\n              </div>\n            </Route>\n  \n            <Route exact path=\"/booking-request\">\n            { (!content) && <Spinner/> }\n              {content && <BookingRequest serviceContent={content} />}\n            </Route>\n  \n            <Route exact path=\"/booking-request/details\">\n            { (!content) && <Spinner/> }\n              <BookingDetails />\n            </Route>\n  \n            <Route exact path=\"/gallery\">\n            { (!content) && <Spinner/> }\n              <Gallery serviceContent={content} />\n            </Route>\n  \n            <Route exact path=\"/messages\">\n            { (!content) && <Spinner/> }\n              {content && <Messages serviceContent={content} />}\n            </Route>\n\n            {/* <Route exact path=\"/calendar\">\n            { (!content) && <Spinner/> }\n              {content && <Calendar serviceContent={content} />}\n            </Route> */}\n  \n            <Route exact path=\"/conversations\">\n            {/* { (!content) && <Spinner/> } */}\n              <Conversations />\n            </Route>\n  \n            <Route>\n              <NonExistentRoute/>\n            </Route>\n            \n          </Switch>\n        </>\n        \n      );\n    }\n  }\n\n  \n\n\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}