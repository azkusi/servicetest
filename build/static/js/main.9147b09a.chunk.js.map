{"version":3,"sources":["store_pages/BookingRequest.js","firebase.js","store_pages/404_error.js","store_pages/hooks/useFirestore.js","store_pages/components/ImageGrid.js","store_pages/components/Modal.js","store_pages/Gallery.js","store_pages/Services.js","store_components/Navigation.js","store_components/BackgroundImage.js","store_components/SecondaryNav.js","store_pages/Messages.js","store_pages/Calendar.js","store_pages/Conversation.js","store_pages/BookingDetails.js","App.js","reportWebVitals.js","index.js"],"names":["db","app","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","config","auth","apps","length","firestore","BookingRequest","serviceContent","useState","success","setSuccess","nameRef","useRef","messageRef","emailRef","serviceRef","notesRef","offerred_services","service_content","services","e","a","preventDefault","nameSent","current","value","emailSent","messageSent","serviceChosen","serviceNotes","console","log","currentTime","Date","now","convoref","collection","doc","service_provider_name","convorefID","id","set","add","useEffect","JSON","stringify","Card","Body","Form","onSubmit","Group","Label","Control","type","ref","placeholder","required","Select","map","item","index","toString","service_name","Button","Alert","severity","page_title","require","io","process","PORT","Lost","projectFirestore","className","FieldValue","serverTimestamp","useFirestore","provider_name","docs","setDocs","unsub","onSnapshot","documents","data","gallery_images","ImageGrid","provider_Name","setSelectedImg","motion","div","layout","whileHover","opacity","s","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImg","target","classList","contains","y","Gallery","providerName","Services","servicesReady","setServicesReady","history","useHistory","serviceCategories","setServiceCategories","serviceSubCategories","setServiceSubCategories","setServices","Promise","resolve","reject","service_categories","then","i","j","serviceHolder","servicesB","main_category","push","Object","keys","key","Navigation","topNavColour","page_styling","BackgroundImage","backgroundImage","frontPageTitle","frontPageTagline","description","SecondaryNav","secondaryNavColour","to","axios","port","Calendar","bookings_events","content","setContent","isPending","setIsPending","datatosend","socket","connect","on","info","disconnect","store_name","document","title","undefined","post","res","Spinner","animation","Messages","Conversations","match","location","search","useLocation","messages","setMessages","redirect","setRedirect","setFinishedLoading","messageList","URLSearchParams","get","conversationID","convoRef","update","searcher","has","providerRefTest","fullConvoRefTest","docSnapshot","exists","orderBy","querySnapshot","forEach","snapshot","messageID","message_sent_by","message","timestamp","getConversation","msgListResult","BookingDetails","finishedLoading","bookingdetalis","setBookingDetails","bookingRefID","bookingRef","bookingID","err","bookingrefID","Title","client_name","Text","service_requested","service_notes","client_email","App","exact","path","Conversation","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9147b09a.chunk.js","sourcesContent":["import \"../styles.css\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport { Form, Button, Card } from \"react-bootstrap\";\n// import DropdownButton from 'react-bootstrap/DropdownButton'\n// import Dropdown from 'react-bootstrap/Dropdown'\nimport Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction BookingRequest ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  const serviceRef = useRef()\n  const notesRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n  const offerred_services = serviceContent.service_content.services\n\n\n  useEffect(()=>{\n    console.log(\"store content\" + JSON.stringify(serviceContent))\n    //.then()\n    \n}, [])\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    const serviceChosen = serviceRef.current.value\n    const serviceNotes = notesRef.current.value\n    console.log(\"Name: \" + nameSent)\n    console.log(\"Email: \" + emailSent)\n    console.log(\"Message: \" + messageSent)\n    \n    try{\n      setSuccess(true)\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('bookingrequests').doc()\n      const convorefID = convoref.id\n      console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"service_requested\" : serviceChosen, \"service_notes\": serviceNotes, \"timestamp\": currentTime})\n      await db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('bookingrequests').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime})\n      \n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false)\n    }\n}\n\nif(success === null){\n  return (\n    <>\n      <div>\n        <h2>Services</h2> \n      </div>\n      <div>\n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n\n          <Form.Select aria-label=\"Select Service\">\n          {offerred_services.map((item, index)=>{\n            return(\n              <option ref={serviceRef} value={index.toString()}>{item.service_name}</option>\n            )\n            \n          })}\n          </Form.Select>\n\n          \n          <Form.Group id=\"notes\">\n            <Form.Label>Extra Notes</Form.Label>\n            <Form.Control type=\"text\" ref={notesRef} placeholder=\"Type message\" required />\n          </Form.Group>\n\n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Submit Booking Request</Button>\n        </Form>\n        </Card.Body>\n        </Card>\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n\n  )\n}\nelse{\n  return (\n    <div>\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      {success ? <Alert severity=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert> :\n       <Alert severity=\"danger\">\n       Error occurred, please contact support\n       <br/>\n     </Alert>} \n    </div>\n    );\n}\n    \n  }\n   \n  export default BookingRequest;","import firebase from \"firebase/compat/app\"\nimport \"firebase/compat/auth\"\n\nconst app = firebase.initializeApp({\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n})\n\nexport const config = {\n    // apiKey: \"AIzaSyBw6gDwpt-ryvVo3x6-dIdhIoKFNB3FA5g\",\n    // authDomain: \"dashtest-7cb07.firebaseapp.com\",\n    // databaseURL: \"https://dashtest-7cb07.firebaseio.com\",\n    // projectId: \"dashtest-7cb07\",\n    // storageBucket: \"dashtest-7cb07.appspot.com\",\n    // messagingSenderId: \"541191639978\",\n    // appId: \"1:541191639978:web:77ba0cf5df3174468451d3\"\n    apiKey: \"AIzaSyBA8Oj4PDbc826IzdhGDDU579yJ2pL3N9o\",\n    authDomain: \"serviiotest.firebaseapp.com\",\n    projectId: \"serviiotest\",\n    storageBucket: \"serviiotest.appspot.com\",\n    messagingSenderId: \"199172448030\",\n    appId: \"1:199172448030:web:c83109d3e1e9101e3ff30f\",\n    measurementId: \"G-QL4CWBDQQJ\"\n}\n\nexport const auth = app.auth();\nexport default app","//import logo from './logo.svg';\nimport React, {useState} from 'react';\nconst { io } = require(\"socket.io-client\");\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction Lost() {\n  \n  \n  return (\n    <div className=\"Lost\">\n      <h1> The page you are looking for doesn't exist </h1>\n      <br></br>\n      <h2> Redirect to servviio.com if you like </h2>\n\n    </div>\n  );\n}\n\nexport default Lost;\n","import { useState, useEffect } from 'react';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport \"firebase/compat/storage\"\nimport {auth, config} from '../../firebase';\n// import { projectFirestore } from '../firebase/config';\n\n\nlet db;\nlet projectFirestore;\nlet timestamp;\nlet admin_data;\n\nif (!firebase.apps.length) {\n    db = firebase.firestore()\n    firebase.initializeApp(config);\n    projectFirestore = firebase.firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n    projectFirestore = firebase.app().firestore();\n    timestamp = firebase.firestore.FieldValue.serverTimestamp;\n\n  }\n\nconst useFirestore = (provider_name) => {\n  const [docs, setDocs] = useState([]);\n  \n\n  useEffect(() => {\n    \n    const unsub = projectFirestore.collection(\"serviceProviders\").doc(provider_name)\n    .onSnapshot(doc => {\n        let documents;\n        documents = doc.data().gallery_images;\n        setDocs(documents);\n    });\n    return () => unsub();\n    \n  }, [provider_name]);\n\n  \n\n  return { docs };\n}\n\nexport default useFirestore;","import React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ provider_Name, setSelectedImg }) => {\n\n\n  const { docs } = useFirestore(provider_Name);\n\n  return (\n    <div className=\"img-grid\">\n      {docs && docs.map((doc, index) => (\n        <motion.div className=\"img-wrap\" key={index} \n          layout\n          whileHover={{ opacity: 1 }}s\n          onClick={() => setSelectedImg(doc.url)}\n        >\n          <motion.img src={doc.url} alt=\"uploaded pic\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 1 }}\n          />\n        </motion.div>\n      ))}\n    </div>\n  )\n}\n\nexport default ImageGrid;","import React from 'react';\nimport { motion } from 'framer-motion';\n\nconst Modal = ({ setSelectedImg, selectedImg }) => {\n\n  const handleClick = (e) => {\n    if (e.target.classList.contains('backdrop')) {\n      setSelectedImg(null);\n    }\n  }\n\n  return (\n    <motion.div className=\"backdrop\" onClick={handleClick}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n    >\n      <motion.img src={selectedImg} alt=\"enlarged pic\" \n        initial={{ y: \"-100vh\" }}\n        animate={{ y: 0 }}\n      />\n    </motion.div>\n  )\n}\n\nexport default Modal;","import React, { useState, useRef, useEffect } from \"react\";\n\nimport {config} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\n\nimport ImageGrid from './components/ImageGrid';\nimport Modal from './components/Modal';\nimport { Spinner } from \"react-bootstrap\";\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\n\nexport default function Gallery({serviceContent}) {\n \n    const [selectedImg, setSelectedImg] = useState(null);\n    // const [providerName, setProviderName] = useState(null)\n    const providerName = serviceContent.service_provider_name\n\n\n\n    // useEffect(()=>{\n        \n    //     setProviderName(serviceContent.service_provider_name)\n\n    // }, [])\n\n    if(providerName === null){\n        return(\n          <h4> Loading... </h4>\n        )\n    }else{\n        return (\n            <div className=\"Gallery\">\n              <h2> Gallery </h2>\n\n              {providerName && <ImageGrid provider_Name={providerName} setSelectedImg={setSelectedImg} />}\n              { selectedImg && (\n                <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} />\n              )}\n            </div>\n          );\n    }\n\n\n  \n\n}","import React, { useState, useEffect } from \"react\";\nimport { Card, Button, Alert, Spinner } from \"react-bootstrap\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n// import 'react-pro-sidebar/dist/css/styles.css';\nimport {auth, config} from '../firebase';\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\n\nexport default function Services({serviceContent}) {\n    const [error, setError] = useState(\"\")\n    const [servicesReady, setServicesReady] = useState(false)\n    const [loggedIn, setIsloggedIn] = useState(true)\n    const history = useHistory()\n    const [serviceCategories, setServiceCategories] = useState(null)\n    const [serviceSubCategories, setServiceSubCategories] = useState(null)\n    //setServices(services => ({...services, ...servicesB}))\n    const [services, setServices] = useState(null)\n\n\n    useEffect(()=>{\n        dataReadyCheck().then(()=>{\n            var servicesB = {}\n            var i;\n            var j;\n            var serviceHolder;\n            for(i=0; i < serviceCategories.length; i++){\n                //set key in services object i.e. {main categoryM: \"\"}\n                serviceHolder = []\n                for(j=0; j < serviceSubCategories.length; j++){\n                    console.log(\"service category: \" + serviceCategories[i] + \" service name: \" + JSON.stringify(serviceSubCategories[j]))\n                    if (serviceSubCategories[j].main_category === serviceCategories[i].toString()){\n                        serviceHolder.push(serviceSubCategories[j].service_name)\n                    }\n                    if(j === serviceSubCategories.length -1){\n                        //i.e. {maincategory1 : [subcategory1, subcategory2...subcategoryN]..., maincategoryM: []}\n                        servicesB[ serviceCategories[i] ] = serviceHolder\n                    }\n                }\n                if(i === serviceCategories.length - 1){\n                    console.log(\"Services inside loop: \" + JSON.stringify(services))\n                    console.log(\"ServiceReady has been set to true\")\n                    setServices(servicesB)\n                    setServicesReady(true)\n                }\n                \n            }\n        }, ()=>{\n            history.push('/admin')\n        })\n        \n        \n    }, [serviceSubCategories, serviceCategories])\n\n\n    function dataReadyCheck(){\n      return new Promise((resolve, reject)=>{\n        setServiceCategories(serviceContent.service_content.service_categories)\n        setServiceSubCategories(serviceContent.service_content.services)\n        if(serviceSubCategories!== null && serviceCategories !== null){\n          console.log(\"Servicesubcategories: \" + JSON.stringify(serviceSubCategories))\n          console.log(\"Servicecategories: \" + JSON.stringify(serviceCategories))\n          resolve()\n        }\n      })\n    }\n\n\n    if(servicesReady === false){\n        console.log(\"ServiceReady = false atm\")\n        return(\n            <h4>Loading...</h4>\n        )\n    }\n    else{\n        console.log(\"ServiceReady = true atm\")\n        console.log(\"services: \" + JSON.stringify(services))\n\n\n        return (\n            <>\n\n            <div>\n                <h1> Services page </h1>\n                <br></br>\n\n                    <div>\n                    {Object.keys(services).map((key, index)=>{\n                        console.log(\"key: \" + key)\n                        console.log(\"Services: \" + JSON.stringify(services))\n                        return(\n                            <div>\n                                <h3> {key} </h3>\n                                <div>\n                                    {services[key].map((item, i) =>{\n                                        return(<h4> {item} </h4>)\n                                    })}\n                                </div>\n                            </div>\n                        )\n                    })}\n                    </div>\n\n            </div>\n\n            </>\n        )\n    }\n}","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Navigation({ serviceContent }){\n\n  var topNavColour;\n\n  if(serviceContent.service_content.page_styling === \"choice_1\"){\n    topNavColour = \"nav-1\";\n}\nelse if(serviceContent.service_content.page_styling === \"choice_2\"){\n  topNavColour = \"nav-2\";\n    \n}\nelse{\n  topNavColour = \"nav-3\";\n}\n    return(\n      <>\n        <nav className={topNavColour}>\n          <h2> {serviceContent.service_content.page_title} </h2>\n          <ul className=\"nav-link\">\n            {/* <li>\n              <Link to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/services\">\n                Services\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/bookings\">\n                Bookings\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/gallery\">\n                Gallery\n              </Link>\n            </li> */}\n          </ul>\n        </nav>\n      </>\n    );\n}\n\nexport default Navigation\n","\n\nfunction BackgroundImage({ serviceContent }){\n    var backgroundImage;\n    var frontPageTitle;\n    var frontPageTagline;\n\n    console.log(\"service content:\" + JSON.stringify(serviceContent))\n\n    if(serviceContent.service_content.page_styling === \"choice_1\"){\n        backgroundImage = \"background-image-1\";\n        frontPageTitle = \"frontPageTitle-1\";\n        frontPageTagline = \"frontPageTagline-1\";\n    }\n    else if(serviceContent.service_content.page_styling === \"choice_2\"){\n        backgroundImage = \"background-image-2\";\n        frontPageTitle = \"frontPageTitle-2\";\n        frontPageTagline = \"frontPageTagline-2\";\n    }\n    else{\n        backgroundImage = \"background-image-3\";\n        frontPageTitle = \"frontPageTitle-3\";\n        frontPageTagline = \"frontPageTagline-3\";\n    }\n\n    return(\n        <div className={backgroundImage}>\n            {/* <h3 style={{color: \"white\", fontWeight:\"bold\"}}> Service Provider Name goes here and tagline </h3> */}\n            <h1 className={frontPageTitle}> {serviceContent.service_content.page_title}</h1>\n            <br></br>\n            <h3 className={frontPageTagline}> {serviceContent.service_content.description}</h3>\n        </div>\n        // <style>\n        //     body {\n        //         background-image: url('img_girl.jpg');\n        //         background-repeat: no-repeat;\n        //         background-attachment: fixed;\n        //         background-size: 100% 100%;\n        //     }\n\n        // </style>\n    )\n}\n\nexport default BackgroundImage","import React from 'react';\nimport '../App.css';\nimport { Link } from 'react-router-dom';\n\nfunction SecondaryNav({ serviceContent }){\n    \n    var secondaryNavColour;\n\n  if(serviceContent.service_content.page_styling === \"choice_1\"){\n    secondaryNavColour = \"nav-1a\";\n}\nelse if(serviceContent.service_content.page_styling === \"choice_2\"){\n    secondaryNavColour = \"nav-2a\";\n    \n}\nelse{\n    secondaryNavColour = \"nav-3a\";\n}\n\n    return(\n      <>\n        <nav className={secondaryNavColour}>\n          <ul className=\"nav-link\">\n            <li>\n              <Link to=\"/\">\n                View Services\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/calendar\">\n                View Availability\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/booking-request\">\n                Send Booking Request\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/gallery\">\n                Gallery\n              </Link>\n            </li>\n            <li>\n              <Link to=\"/messages\">\n                Send Message\n              </Link>\n            </li>\n          </ul>\n        </nav>\n      </>\n    );\n}\n\nexport default SecondaryNav\n","import \"../styles.css\";\nimport React, { useRef, useState } from \"react\";\nimport { Form, Button, Card } from \"react-bootstrap\";\nimport Alert from '@mui/material/Alert';\n\nimport {app} from '../firebase';\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\n\nimport config from '../firebase';\n\nlet db;\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n  db = firebase.firestore();\n}else {\n  db = firebase.app().firestore() // if already initialized, use that one\n}\n\nfunction Messages ({ serviceContent }) {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\")\n  const [message, setMessage] = useState(\"\")\n  const [success, setSuccess] = useState(null)\n  const nameRef = useRef()\n  const messageRef = useRef()\n  const emailRef = useRef()\n  // const [serviceProviderData, setServiceProviderData] = useState(serviceContent);\n  // const [value, setValue] = useState()\n  // const onInput = ({target:{value}}) => setValue(value)\n \n \n  async function onFormSubmit (e){\n    e.preventDefault();\n    const nameSent = nameRef.current.value;\n    const emailSent = emailRef.current.value\n    const messageSent = messageRef.current.value\n    console.log(\"Name: \" + nameSent)\n    console.log(\"Email: \" + emailSent)\n    console.log(\"Message: \" + messageSent)\n    try{\n      const currentTime = Date.now()\n      const convoref = db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('conversations').doc()\n      const convorefID = convoref.id\n      console.log(\"convorefID is: \" + convorefID)\n      await convoref.set({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"client_name\": nameSent, \"client_email\": emailSent, \"timestamp\": currentTime})\n      await db.collection('serviceProviders').doc(serviceContent.service_provider_name).collection('conversations').doc(convorefID).collection('messages').add({\"message\": messageSent, \"client_name\": nameSent, \"client_email\": emailSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime})\n      setSuccess(true)\n    }\n    catch(err){\n      console.log(\"error is: \" + err)\n      setSuccess(false);\n    }\n}\n\n  if(success === null){\n    return (\n      <>\n      <div>\n        <h2>Messages</h2> \n      </div>\n      <div>\n      {!success && \n      <Card>\n      <Card.Body>\n        <Form onSubmit={onFormSubmit}>\n          <Form.Group id=\"name\">\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\" ref={nameRef} placeholder=\"name\" required />\n          </Form.Group>\n\n          <Form.Group id=\"email\">\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"email\" ref={emailRef} placeholder=\"email\" required />\n          </Form.Group>\n          \n          <Form.Group id=\"message\">\n            <Form.Label>Message</Form.Label>\n            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n          </Form.Group>\n          <Button type=\"submit\">Send Message</Button>\n        </Form>\n        </Card.Body>\n        </Card>}\n\n\n      {/* {success && <h2>Successfully sent</h2>} */}\n\n      \n\n      </div>\n      </>\n      //\n      //start working on cloud function to send email to serviceProvider and to client\n\n      //on serviomain add firebase function code to retrieve messages and set notifications\n      //for each convo retrieve last message sent, whether unread by provider or not and all messages from convo\n    );\n\n  }     \n  else{\n    return(\n      <div>\n        {success ? <Alert severity=\"success\">\n        Your message was successfully sent to {serviceContent.service_content.page_title}\n        <br/>\n        We will send you an email when {serviceContent.service_content.page_title} responds to your message.\n      </Alert>   :\n        <Alert severity=\"danger\">\n        Error occurred, please contact support\n        <br/>\n      </Alert>\n        }\n\n      </div>\n      \n    )\n  }\n\n}\n   \n  export default Messages;","import React, {useState, useEffect} from 'react';\nimport { Spinner } from 'react-bootstrap';\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\nconst port = process.env.PORT || 5000;\n\nconst Calendar = ({ bookings_events }) => {\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n\n\n  useEffect(() => {\n    var data = {}\n    var datatosend;\n    const socket = io();\n    socket.connect(`http://localhost:${port}`);\n    \n    return new Promise((resolve, reject) =>{\n      socket.on(\"store_check\", (info)=>{\n        socket.disconnect();\n        //subdomain = domain.hostname\n        \n        data[\"store_name\"] = info.store_name\n        datatosend = data\n        \n        document.title = info.store_name;\n        if(datatosend !== undefined){\n          resolve(datatosend)\n        }\n        \n      })\n      \n    }).then(()=>{\n      console.log(\"data to send is: \" + JSON.stringify(datatosend))\n      axios.post(\"https://us-central1-dashtest-7cb07.cloudfunctions.net/getStoreContent\", datatosend)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        setIsPending(false);\n        setContent(data);\n      })\n    })\n\n  }, [])\n\n    return (\n      <div className=\"Calendar\">\n          { isPending && <div> <Spinner animation=\"border\"/> </div> }\n          {content && <h1> {content.service_provider_name}'s calendar events - React page </h1>}\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n          <br></br>\n          <h3>More content</h3>\n      </div>\n    );\n  }\n   \n  export default Calendar;","import React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction Conversations({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    // const [firebaseConversationID, setfirebaseConversationID] = useState(\"\") \n\n    const [messages, setMessages] = useState([])\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const messageRef = useRef()\n    var messageList = [];\n\n    useEffect(()=>{\n\n        paramCheck().then(()=>{\n            getConversation().then((msgListResult)=>{\n                setMessages(msgListResult)\n                setFinishedLoading(true)\n            }, (value)=>{\n                console.log(value)\n                setRedirect(true)\n            })\n        }, (value)=>{\n            console.log(value)\n            setRedirect(true)\n        })\n        \n    }, [search, messages])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const convoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRef.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime})\n          await convoRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime})\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n    function paramCheck(){\n        return new Promise((resolve, reject)=>{\n            const searcher = new URLSearchParams(search)\n            if(!(searcher.has('chat')) || !(searcher.has('provider'))){\n                reject(\"missing params\");\n            }\n            else{\n                resolve(\"params present\")\n            }\n        })\n    }\n\n    function getConversation(){\n        // const providerName = location.query.provider\n        // const conversationID = location.query.chat\n        const providerName = new URLSearchParams(search).get('provider')\n        const conversationID = new URLSearchParams(search).get('chat')\n        return new Promise((resolve, reject)=>{ \n            // console.log(\"running get convo function\")\n            const providerRefTest = db.collection('serviceProviders').doc(providerName)\n            const fullConvoRefTest = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID)\n            providerRefTest.get()\n            .then((docSnapshot)=>{\n                // console.log(\"got 1st snap\")\n                if(!docSnapshot.exists){\n                    // console.log(\"retailer does not exist\")\n                    reject(\"conversation does not exist\")\n                }\n                else{\n                    fullConvoRefTest.get()\n                    .then((docSnapshot)=>{\n                        // console.log(\"got 2nd snap\")\n                        if(!docSnapshot.exists){\n                            // console.log(\"convo does not exist\")\n                            reject(\"conversation does not exist\")\n                        }\n                        else{\n\n                            const fullConvoRef = db.collection('serviceProviders').doc(providerName).collection('conversations').doc(conversationID).collection('messages')\n                            fullConvoRef.orderBy('timestamp', 'asc')\n                            .onSnapshot(async (querySnapshot)=>{\n                                // console.log(\"got messages snap\")\n                                querySnapshot.forEach((snapshot) =>{\n                                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                                    // console.log(\"messageList inside snapshot loop: \" + JSON.stringify(messageList))\n                                    const messageID = snapshot.id\n                                    if(snapshot.data().message_sent_by === \"client\"){\n                                        //place unread colour or notification on message\n                                        // console.log(\"adding client msg\")\n                                        messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }else{\n                                    //simply place message\n                                    //   console.log(\"adding provider msg\")\n                                    messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }\n                                    \n                                })\n                            // console.log(\"MSGList inside function\" + JSON.stringify(messageList))\n                            resolve(messageList);\n                            })\n                            \n                        }\n                        \n                    })\n                }\n            })\n          \n        })\n        \n      }\n\n      if(redirect){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {/* {loading ? <Spinner animation=\"border\"/> : <> <h3>firebase conversationID:</h3> {firebaseConversationID} </>}\n                 <h3>firebase conversationID:</h3> {firebaseConversationID}\n                 <p>\n                    {JSON.stringify(location)}\n                 </p> */}\n    \n                <div>\n                    {messages.map((item, index)=>{\n                    return(\n                        <li key={index}>\n                            {/* color={item.message_sent_by} */}\n                            <h4>\n                                {item.message}\n                            </h4>\n                        </li>\n                    )\n                    })}\n                </div>\n                <div>\n                <Card>\n          <Card.Body>\n            <Form onSubmit={onFormSubmit}>\n              \n              <Form.Group id=\"message\">\n                <Form.Label>Message</Form.Label>\n                <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n              </Form.Group>\n              <Button type=\"submit\">Send Message</Button>\n            </Form>\n            </Card.Body>\n            </Card>\n                </div>\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default Conversations","import React, { useEffect, useState, useRef } from 'react';\nimport Row from \"react-bootstrap/Row\"\nimport firebase from \"firebase/compat/app\";\nimport \"firebase/compat/firestore\";\nimport config from '../firebase';\nimport { Spinner, Form, Button, Card } from \"react-bootstrap\";\nimport {useLocation, Redirect} from 'react-router-dom'\n\nlet db;\n  var store_name;\n  var loaded;\n\n  if (!firebase.apps.length) {\n    firebase.initializeApp(config);\n    db = firebase.firestore();\n  }else {\n    db = firebase.app().firestore() // if already initialized, use that one\n  }\n\nfunction BookingDetails({match, location}) {\n    // console.log(\"reached FullConversations component\")\n    const search = useLocation().search;\n    \n    // const [firebaseConversationID, setfirebaseConversationID] = useState(\"\") \n\n    const [messages, setMessages] = useState([])\n    const [redirect, setRedirect] = useState(false);\n    const [finishedLoading, setFinishedLoading] = useState(false)\n    const [bookingdetalis, setBookingDetails] = useState('')\n    const messageRef = useRef()\n    var messageList = [];\n\n    useEffect(()=>{\n\n        paramCheck().then(()=>{\n            getBookingDetails().then(()=>{\n                getConversation().then(()=>{\n                    setMessages(messageList)\n                    setFinishedLoading(true)\n                }, (value)=>{\n                    console.log(value);\n                    setRedirect(true)\n                })\n            },(err)=>{\n                console.log(\"error occurred: \" + err);\n            })\n        }, (value)=>{\n            console.log(value)\n            setRedirect(true)\n        })\n        \n    }, [search, messages])\n\n    async function onFormSubmit (e){\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingRefID = new URLSearchParams(search).get('bookingref')\n        e.preventDefault();\n        const messageSent = messageRef.current.value\n        console.log(\"Message: \" + messageSent)\n        // setSuccess(true)\n        try{\n            const currentTime = Date.now()\n        //create new message doc for this new message provider has just typed\n          const messageRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID).collection('messages').doc()\n        // update the 'most recent message sent field in the conversations collection doc'\n          const bookingRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingRefID)\n        //   console.log(\"convorefID is: \" + convorefID)\n          await messageRef.set({\"message\": messageSent, \"message_sent_by\": \"client\", \"timestamp\": currentTime})\n          await bookingRef.update({\"last_message_sent\": messageSent, \"last_message_sent_by\": \"client\", \"timestamp\": currentTime})\n            console.log(\"message sent: \" + messageSent) \n        }\n        catch(err){\n          console.log(\"error is: \" + err)\n        }\n    }\n\n\n    function paramCheck(){\n        return new Promise((resolve, reject)=>{\n            const searcher = new URLSearchParams(search)\n            if(!(searcher.has('bookingref')) || !(searcher.has('provider'))){\n                reject(\"missing params\");\n            }\n            else{\n                resolve(\"params present\")\n            }\n        })\n    }\n\n    function getConversation(){\n        // const providerName = location.query.provider\n        // const conversationID = location.query.chat\n        const providerName = new URLSearchParams(search).get('provider')\n        const bookingrefID = new URLSearchParams(search).get('bookingref')\n        return new Promise((resolve, reject)=>{ \n            // console.log(\"running get convo function\")\n            const providerRefTest = db.collection('serviceProviders').doc(providerName)\n            const fullConvoRefTest = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingrefID)\n            providerRefTest.get()\n            .then((docSnapshot)=>{\n                // console.log(\"got 1st snap\")\n                if(!docSnapshot.exists){\n                    // console.log(\"retailer does not exist\")\n                    reject(\"conversation does not exist\")\n                }\n                else{\n                    fullConvoRefTest.get()\n                    .then((docSnapshot)=>{\n                        // console.log(\"got 2nd snap\")\n                        if(!docSnapshot.exists){\n                            // console.log(\"convo does not exist\")\n                            reject(\"conversation does not exist\")\n                        }\n                        else{\n\n                            const fullConvoRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingrefID).collection('messages')\n                            fullConvoRef.orderBy('timestamp', 'asc')\n                            .onSnapshot(async (querySnapshot)=>{\n                                // console.log(\"got messages snap\")\n                                querySnapshot.forEach((snapshot) =>{\n                                    // console.log(\"snapshot data: \" + JSON.stringify(snapshot.data()))\n                                    // console.log(\"messageList inside snapshot loop: \" + JSON.stringify(messageList))\n                                    const messageID = snapshot.id\n                                    if(snapshot.data().message_sent_by === \"client\"){\n                                        //place unread colour or notification on message\n                                        // console.log(\"adding client msg\")\n                                        messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }else{\n                                    //simply place message\n                                    //   console.log(\"adding provider msg\")\n                                    messageList.push({\n                                        \"message\": snapshot.data().message,\n                                        \"timestamp\": snapshot.data().timestamp,\n                                        \"message_sent_by\": snapshot.data().message_sent_by,\n                                        \"messageID\": messageID})\n                                    }\n                                    \n                                })\n                            // console.log(\"MSGList inside function\" + JSON.stringify(messageList))\n                            resolve(messageList);\n                            })\n                            \n                        }\n                        \n                    })\n                }\n            })\n          \n        })\n        \n      }\n\n      function getBookingDetails(){\n        return new Promise((resolve, reject)=>{\n            const providerName = new URLSearchParams(search).get('provider')\n            const bookingID = new URLSearchParams(search).get('bookingref')\n            const bookingDeetsRef = db.collection('serviceProviders').doc(providerName).collection('bookingrequests').doc(bookingID)\n            bookingDeetsRef.get().then((doc)=>{\n                setBookingDetails(doc.data())\n                resolve(bookingdetalis)\n            }, (err)=>{\n                reject(err)\n            })\n        })\n    }\n\n      if(redirect){\n          return(<Redirect to=\"/\" />\n              )\n      }\n      else{\n        return(     \n            <>\n                {\n                    finishedLoading ?\n                        <div>\n                            <Card>\n                                <Card.Body>\n                                    <Card.Title>\n                                        {bookingdetalis.client_name}\n                                    </Card.Title>\n                                    <Card.Text>\n                                        {bookingdetalis.service_requested}\n                                        {bookingdetalis.service_notes}\n                                        {bookingdetalis.client_email}\n                                    </Card.Text>\n                                </Card.Body>\n                            </Card>\n                            <br/>\n\n        \n                            <div>\n                            {messages.map((item, index)=>{\n                            return(\n                                <li key={index}>\n                                    {/* color={item.message_sent_by} */}\n                                    <h4>\n                                        {item.message}\n                                    </h4>\n                                </li>\n                            )\n                            })}\n                            </div>\n                            <div>\n                                <Card>\n                                    <Card.Body>\n                                        <Form onSubmit={onFormSubmit}>\n                                        \n                                        <Form.Group id=\"message\">\n                                            <Form.Label>Message</Form.Label>\n                                            <Form.Control type=\"text\" ref={messageRef} placeholder=\"Type message\" required />\n                                        </Form.Group>\n                                        <Button type=\"submit\">Send Message</Button>\n                                        </Form>\n                                    </Card.Body>\n                                </Card>\n                            </div>\n                        </div>\n                        : <h4>Loading...</h4>\n\n                }\n                 \n            </>\n        )\n      }\n\n      \n      \n      \n}\n\n\nexport default BookingDetails","//import logo from './logo.svg';\nimport Home from './store_pages/BookingRequest'\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Lost from './store_pages/404_error';\nimport './App.css';\nimport React, {useState, useEffect} from 'react';\nimport Gallery from './store_pages/Gallery';\nimport Services from './store_pages/Services';\nimport Navigation from './store_components/Navigation';\nimport BackgroundImage from './store_components/BackgroundImage';\nimport SecondaryNav from './store_components/SecondaryNav';\nimport Calendar from './store_pages/Calendar';\nimport BookingRequest from './store_pages/BookingRequest';\nimport Messages from './store_pages/Messages';\nimport Conversations from './store_pages/Conversation';\nimport BookingDetails from './store_pages/BookingDetails';\nimport { Spinner } from 'react-bootstrap';\n\nconst { io } = require(\"socket.io-client\");\nconst axios = require('axios');\n\n\n\nconst port = process.env.PORT || 5000;\n\nfunction App() {\n\n  const [content, setContent] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n\n\n  useEffect(() => {\n    var data = {}\n    var datatosend;\n    const socket = io();\n    socket.connect(`http://localhost:${port}`);\n    \n    return new Promise((resolve, reject) =>{\n      socket.on(\"store_check\", (info)=>{\n        socket.disconnect();\n        //subdomain = domain.hostname\n        \n        data[\"store_name\"] = info.store_name\n        datatosend = data\n        \n        document.title = info.store_name;\n        if(datatosend !== undefined){\n          resolve(datatosend)\n        }\n        \n      })\n      \n    }).then(()=>{\n      console.log(\"data to send is: \" + JSON.stringify(datatosend))\n      axios.post(\"https://us-central1-serviiotest.cloudfunctions.net/getStoreContent\", datatosend)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        setIsPending(false);\n        setContent(data);\n      })\n    })\n\n  }, [])\n\n\n  return (\n    <>\n      {content && <Navigation serviceContent={content} />}\n      {content && <BackgroundImage serviceContent={content}/> }\n      {content && <SecondaryNav serviceContent={content}/> }\n      <Switch>\n        <Route exact path=\"/\">\n          <div className=\"home\">\n            { isPending && <h4> Loading... </h4> }\n            {content && <Services serviceContent={content} />}\n          </div>\n        </Route>\n        <Route exact path=\"/new\">\n          <Lost />\n        </Route>\n        <Route exact path=\"/calendar\">\n          <Calendar />\n        </Route>\n        <Route exact path=\"/booking-request\">\n        { isPending && <h4> Loading... </h4> }\n          {content && <BookingRequest serviceContent={content} />}\n        </Route>\n        <Route exact path=\"/booking-request/details\">\n          <BookingDetails />\n        </Route>\n        <Route exact path=\"/gallery\">\n          {isPending && <h4> Loading... </h4>}\n          {content && <Gallery serviceContent={content} />}\n          \n        </Route>\n        <Route exact path=\"/messages\">\n        { isPending && <h4> Loading... </h4> }\n          {content && <Messages serviceContent={content} />}\n        </Route>\n        <Route exact path=\"/conversations\">\n          <Conversations />\n        </Route>\n      </Switch>\n    </>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter as Router} from 'react-router-dom';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}